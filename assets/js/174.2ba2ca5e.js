(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{558:function(t,e,r){"use strict";r.r(e);var n=r(44),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"secondary-constructors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#secondary-constructors"}},[t._v("#")]),t._v(" Secondary Constructors")]),t._v(" "),r("blockquote",[r("p",[t._v("When you require several ways to construct an object, named and default arguments are usually the easiest approach. Sometimes, however, you must create multiple overloaded constructors.")])]),t._v(" "),r("p",[t._v("The constructor is “overloaded” because you’re making different ways to create objects of the same class. In Kotlin, overloaded constructors are called "),r("em",[t._v("secondary constructors")]),t._v(". The constructor parameter list (directly after the class name) combined with property initializations and the "),r("code",[t._v("init")]),t._v(" block is called the "),r("em",[t._v("primary constructor")]),t._v(".")]),t._v(" "),r("p",[t._v("To create a secondary constructor, use the "),r("code",[t._v("constructor")]),t._v(" keyword followed by a parameter list that’s distinct from all other primary and secondary parameter lists. Within a secondary constructor, the "),r("code",[t._v("this")]),t._v(" keyword calls either the primary constructor or another secondary constructor:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('// SecondaryConstructors/WithSecondary.kt\npackage secondaryconstructors\nimport atomictest.*\n\nclass WithSecondary(i: Int) {\n  init {\n    trace("Primary: $i")\n  }\n  constructor(c: Char) : this(c - \'A\') {\n    trace("Secondary: \'$c\'")\n  }\n  constructor(s: String) :\n    this(s.first()) {             // [1]\n    trace("Secondary: \\"$s\\"")\n  }\n  /* Doesn\'t compile without a call\n     to the primary constructor:\n  constructor(f: Float) {         // [2]\n    trace("Secondary: $f")\n  }\n  */\n}\n\nfun main() {\n  fun sep() = trace("-".repeat(10))\n  WithSecondary(1)\n  sep()\n  WithSecondary(\'D\')\n  sep()\n  WithSecondary("Last Constructor")\n  trace eq """\n    Primary: 1\n    ----------\n    Primary: 3\n    Secondary: \'D\'\n    ----------\n    Primary: 11\n    Secondary: \'L\'\n    Secondary: "Last Constructor"\n  """\n}\n')])])]),r("p",[t._v("Calling another constructor from a secondary constructor (using "),r("code",[t._v("this")]),t._v(") must happen before additional constructor logic, because the constructor body may depend on those other initializations. Thus it precedes the constructor body.")]),t._v(" "),r("p",[t._v("The argument list determines the constructor to call. "),r("code",[t._v("WithSecondary(1)")]),t._v(" matches the primary constructor, "),r("code",[t._v("WithSecondary('D')")]),t._v(" matches the first secondary constructor, and "),r("code",[t._v('WithSecondary("Last Constructor")')]),t._v(" matches the second secondary constructor. The "),r("code",[t._v("this()")]),t._v(" call in "),r("strong",[t._v("[1]")]),t._v(" matches the first secondary constructor, and you can see the chain of calls in the output.")]),t._v(" "),r("p",[t._v("The primary constructor must always be called, either directly or through a call to a secondary constructor. Otherwise, Kotlin generates a compile-time error, as in "),r("strong",[t._v("[2]")]),t._v(". Thus, all common initialization logic that can be shared between constructors should be placed in the primary constructor.")]),t._v(" "),r("p",[t._v("An "),r("code",[t._v("init")]),t._v(" section is not required when using secondary constructors:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('// SecondaryConstructors/GardenItem.kt\npackage secondaryconstructors\nimport atomictest.eq\nimport secondaryconstructors.Material.*\n\nenum class Material {\n  Ceramic, Metal, Plastic\n}\n\nclass GardenItem(val name: String) {\n  var material: Material = Plastic\n  constructor(\n    name: String, material: Material    // [1]\n  ) : this(name) {                      // [2]\n    this.material = material            // [3]\n  }\n  constructor(\n    material: Material\n  ) : this("Strange Thing", material)   // [4]\n  override fun toString() = "$material $name"\n}\n\nfun main() {\n  GardenItem("Elf").material eq Plastic\n  GardenItem("Snowman").name eq "Snowman"\n  GardenItem("Gazing Ball", Metal) eq   // [5]\n    "Metal Gazing Ball"\n  GardenItem(material = Ceramic) eq\n    "Ceramic Strange Thing"\n}\n')])])]),r("ul",[r("li",[r("strong",[t._v("[1]")]),t._v(" Only the parameters of the primary constructor can be declared as properties via "),r("code",[t._v("val")]),t._v(" or "),r("code",[t._v("var")]),t._v(".")]),t._v(" "),r("li",[r("strong",[t._v("[2]")]),t._v(" You cannot declare a return type for a secondary constructor.")]),t._v(" "),r("li",[r("strong",[t._v("[3]")]),t._v(" The "),r("code",[t._v("material")]),t._v(" parameter has the same name as a property, so we disambiguate it using "),r("code",[t._v("this")]),t._v(".")]),t._v(" "),r("li",[r("strong",[t._v("[4]")]),t._v(" The secondary constructor body is optional (although you must still include an explicit "),r("code",[t._v("this()")]),t._v(" call).")])]),t._v(" "),r("p",[t._v("When calling the first secondary constructor in line "),r("strong",[t._v("[5]")]),t._v(", the property "),r("code",[t._v("material")]),t._v(" is assigned twice. First, the "),r("code",[t._v("Plastic")]),t._v(" value is assigned during the call to the primary constructor (in "),r("strong",[t._v("[2]")]),t._v(") and initialization of all the class properties, then it’s changed to the "),r("code",[t._v("material")]),t._v(" parameter at "),r("strong",[t._v("[3]")]),t._v(".")]),t._v(" "),r("p",[t._v("The "),r("code",[t._v("GardenItem")]),t._v(" class can be simplified using default arguments, replacing the secondary constructors with a single primary constructor.")]),t._v(" "),r("p",[r("em",[r("strong",[t._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);