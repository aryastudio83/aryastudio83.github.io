(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{589:function(e,t,i){"use strict";i.r(t);var a=i(44),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"late-initialization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#late-initialization"}},[e._v("#")]),e._v(" Late Initialization")]),e._v(" "),i("blockquote",[i("p",[e._v("Sometimes you want to initialize properties of your class after it is created, but in a separate member function instead of using "),i("code",[e._v("lazy")]),e._v(".")])]),e._v(" "),i("p",[e._v("For example, a framework or library might require initialization in a special function. If you extend that library class, you can provide your own implementation of that special function.")]),e._v(" "),i("p",[e._v("Consider a "),i("code",[e._v("Bag")]),e._v(" interface with a "),i("code",[e._v("setUp()")]),e._v(" that initializes instances:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("// LateInitialization/Bag.kt\npackage lateinitialization\n\ninterface Bag {\n  fun setUp()\n}\n")])])]),i("p",[e._v("Suppose we want to reuse a library that creates and manipulates "),i("code",[e._v("Bag")]),e._v("s and guarantees that "),i("code",[e._v("setUp()")]),e._v(" is called. This library requires subclass initialization in "),i("code",[e._v("setUp()")]),e._v(" instead of in a constructor:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('// LateInitialization/Suitcase.kt\npackage lateinitialization\nimport atomictest.eq\n\nclass Suitcase : Bag {\n  private var items: String? = null\n  override fun setUp() {\n    items = "socks, jacket, laptop"\n  }\n  fun checkSocks(): Boolean =\n    items?.contains("socks") ?: false\n}\n\nfun main() {\n  val suitcase = Suitcase()\n  suitcase.setUp()\n  suitcase.checkSocks() eq true\n}\n')])])]),i("p",[i("code",[e._v("Suitcase")]),e._v(" initializes "),i("code",[e._v("items")]),e._v(" by overriding "),i("code",[e._v("setUp()")]),e._v(". However, we can’t just define "),i("code",[e._v("items")]),e._v(" as a "),i("code",[e._v("String")]),e._v("—if we do that, we must provide a non-null initializer in the constructor. Using a stub value such as an empty "),i("code",[e._v("String")]),e._v(" is a bad practice because you never know whether it’s actually been initialized. "),i("code",[e._v("null")]),e._v(" indicates that it’s not initialized.")]),e._v(" "),i("p",[e._v("Defining "),i("code",[e._v("items")]),e._v(" as a nullable "),i("code",[e._v("String?")]),e._v(" means we must check for "),i("code",[e._v("null")]),e._v(" in all member functions, as in "),i("code",[e._v("checkSocks()")]),e._v(". However, we know that the library we’re reusing initializes "),i("code",[e._v("items")]),e._v(" by calling "),i("code",[e._v("setUp()")]),e._v(", so the "),i("code",[e._v("null")]),e._v(" checks should not be necessary.")]),e._v(" "),i("p",[e._v("The "),i("code",[e._v("lateinit")]),e._v(" property modifier fixes this problem—here, we initialize "),i("code",[e._v("items")]),e._v(" after creating an instance of "),i("code",[e._v("BetterSuitcase")]),e._v(":")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('// LateInitialization/BetterSuitcase.kt\npackage lateinitialization\nimport atomictest.eq\n\nclass BetterSuitcase : Bag {\n  lateinit var items: String\n  override fun setUp() {\n    items = "socks, jacket, laptop"\n  }\n  fun checkSocks() = "socks" in items\n}\n\nfun main() {\n  val suitcase = BetterSuitcase()\n  suitcase.setUp()\n  suitcase.checkSocks() eq true\n}\n')])])]),i("p",[e._v("Compare this version of "),i("code",[e._v("checkSocks()")]),e._v(" with the one in "),i("code",[e._v("Suitcase.kt")]),e._v(". "),i("code",[e._v("lateinit")]),e._v(" means "),i("code",[e._v("items")]),e._v(" is safely defined as a non-nullable property.")]),e._v(" "),i("p",[i("code",[e._v("lateinit")]),e._v(" can be used on a property inside the body of a class, a top-level property, or local "),i("code",[e._v("var")]),e._v(".")]),e._v(" "),i("p",[e._v("Limitations:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("lateinit")]),e._v(" can only be used on a "),i("code",[e._v("var")]),e._v(" property, not a "),i("code",[e._v("val")]),e._v(".")]),e._v(" "),i("li",[e._v("The property must be a non-nullable type.")]),e._v(" "),i("li",[e._v("The property cannot be a primitive type.")]),e._v(" "),i("li",[i("code",[e._v("lateinit")]),e._v(" is not allowed for "),i("code",[e._v("abstract")]),e._v(" properties in an "),i("code",[e._v("abstract")]),e._v(" class or "),i("code",[e._v("interface")]),e._v(".")]),e._v(" "),i("li",[i("code",[e._v("lateinit")]),e._v(" is not allowed for properties with a custom "),i("code",[e._v("get()")]),e._v(" or "),i("code",[e._v("set()")]),e._v(".")])]),e._v(" "),i("p",[e._v("What happens if you forget to initialize such a property? You won’t get compile-time errors or warnings, because the initialization logic might be complex and depend on other properties that Kotlin can’t monitor:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('// LateInitialization/FaultySuitcase.kt\npackage lateinitialization\nimport atomictest.*\n\nclass FaultySuitcase : Bag {\n  lateinit var items: String\n  override fun setUp() {}\n  fun checkSocks() = "socks" in items\n}\n\nfun main() {\n  val suitcase = FaultySuitcase()\n  suitcase.setUp()\n  capture {\n    suitcase.checkSocks()\n  } eq\n    "UninitializedPropertyAccessException" +\n    ": lateinit property items " +\n    "has not been initialized"\n}\n')])])]),i("p",[e._v("This runtime exception has enough detail for you to easily discover and fix the problem. Tracking down an error reported by a "),i("code",[e._v("null")]),e._v(" pointer exception is usually much more difficult.")]),e._v(" "),i("p",[i("code",[e._v(".isInitialized")]),e._v(" will tell you whether a "),i("code",[e._v("lateinit")]),e._v(" property been initialized. The property must be in your current scope, and is accessed using the "),i("code",[e._v("::")]),e._v(" operator:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v('// LateInitialization/IsInitialized.kt\npackage lateinitialization\nimport atomictest.*\n\nclass WithLate {\n  lateinit var x: String\n  fun status() = "${::x.isInitialized}"\n}\n\nlateinit var y: String\n\nfun main() {\n  trace("${::y.isInitialized}")\n  y = "Ready"\n  trace("${::y.isInitialized}")\n  val withlate = WithLate()\n  trace(withlate.status())\n  withlate.x = "Set"\n  trace(withlate.status())\n  trace eq "false true false true"\n}\n')])])]),i("p",[e._v("Although you can create a local "),i("code",[e._v("lateinit var")]),e._v(", you cannot call "),i("code",[e._v(".isInitialized")]),e._v(" on it because references to local "),i("code",[e._v("var")]),e._v("s or "),i("code",[e._v("val")]),e._v("s are not supported.")]),e._v(" "),i("p",[i("em",[i("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);