(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{372:function(e,t,n){e.exports=n.p+"assets/img/code-completion.fd8b34b1.png"},510:function(e,t,n){"use strict";n.r(t);var a=n(44),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"objects-everywhere"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objects-everywhere"}},[e._v("#")]),e._v(" Objects Everywhere")]),e._v(" "),a("blockquote",[a("p",[e._v("Objects store data using "),a("em",[e._v("properties")]),e._v(" ("),a("code",[e._v("val")]),e._v("s and "),a("code",[e._v("var")]),e._v("s) and perform operations with this data using functions.")])]),e._v(" "),a("p",[e._v("Some definitions:")]),e._v(" "),a("ul",[a("li",[a("em",[e._v("Class")]),e._v(": Defines properties and functions for what is essentially a new data type. Classes are also called "),a("em",[e._v("user-defined types")]),e._v(".")]),e._v(" "),a("li",[a("em",[e._v("Member")]),e._v(": Either a property or a function of a class.")]),e._v(" "),a("li",[a("em",[e._v("Member function")]),e._v(": A function that works only with a specific class of object.")]),e._v(" "),a("li",[a("em",[e._v("Creating an object")]),e._v(": Making a "),a("code",[e._v("val")]),e._v(" or "),a("code",[e._v("var")]),e._v(" of a class. Also called "),a("em",[e._v("creating an instance")]),e._v(" of that class.")])]),e._v(" "),a("p",[e._v("Because classes define "),a("em",[e._v("state")]),e._v(" and "),a("em",[e._v("behavior")]),e._v(", we can even refer to instances of built-in types like "),a("code",[e._v("Double")]),e._v(" or "),a("code",[e._v("Boolean")]),e._v(" as objects.")]),e._v(" "),a("p",[e._v("Consider Kotlin’s "),a("code",[e._v("IntRange")]),e._v(" class:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ObjectsEverywhere/IntRanges.kt\n\nfun main() {\n  val r1 = IntRange(0, 10)\n  val r2 = IntRange(5, 7)\n  println(r1)\n  println(r2)\n}\n/* Output:\n0..10\n5..7\n*/\n")])])]),a("p",[e._v("We create two objects (instances) of the "),a("code",[e._v("IntRange")]),e._v(" "),a("em",[e._v("class")]),e._v(". Each object has its own piece of storage in memory. "),a("code",[e._v("IntRange")]),e._v(" is a class, but a particular range "),a("code",[e._v("r1")]),e._v(" from 0 to 10 is an object that is distinct from range "),a("code",[e._v("r2")]),e._v(".")]),e._v(" "),a("p",[e._v("Numerous operations are available for an "),a("code",[e._v("IntRange")]),e._v(" object. Some are straightforward, like "),a("code",[e._v("sum()")]),e._v(", and others require more understanding before you can use them. If you try calling one that needs arguments, the IDE will ask for those arguments.")]),e._v(" "),a("p",[e._v("To learn about a particular member function, look it up in the "),a("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kotlin documentation"),a("OutboundLink")],1),e._v(". Notice the magnifying glass icon in the top right area of the page. Click on that and type "),a("code",[e._v("IntRange")]),e._v(" into the search box. Click on "),a("code",[e._v("kotlin.ranges > IntRange")]),e._v(" from the resulting search. You’ll see the documentation for the "),a("code",[e._v("IntRange")]),e._v(" class. You can study all the member functions—the "),a("em",[e._v("Application Programming Interface")]),e._v(" (API)—of the class. Although you won’t understand most of it at this time, it’s helpful to become comfortable looking things up in the Kotlin documentation.")]),e._v(" "),a("p",[e._v("An "),a("code",[e._v("IntRange")]),e._v(" is a kind of object, and a defining characteristic of an object is that you perform operations on it. Instead of “performing an operation,” we say "),a("em",[e._v("calling a member function")]),e._v(". To call a member function for an object, start with the object identifier, then a dot, then the name of the operation:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ObjectsEverywhere/RangeSum.kt\n\nfun main() {\n  val r = IntRange(0, 10)\n  println(r.sum())\n}\n/* Output:\n55\n*/\n")])])]),a("p",[e._v("Because "),a("code",[e._v("sum()")]),e._v(" is a member function defined for "),a("code",[e._v("IntRange")]),e._v(", you call it by saying "),a("code",[e._v("r.sum()")]),e._v(". This adds up all the numbers in that "),a("code",[e._v("IntRange")]),e._v(".")]),e._v(" "),a("p",[e._v("Earlier object-oriented languages used the phrase “sending a message” to describe calling a member function for an object. Sometimes you’ll still see that terminology.")]),e._v(" "),a("p",[e._v("Classes can have many operations (member functions). It’s easy to explore classes using an IDE (integrated development environment) that includes a feature called "),a("em",[e._v("code completion")]),e._v(". For example, if you type "),a("code",[e._v(".s")]),e._v(" after an object identifier within IntelliJ IDEA, it shows all the members of that object that begin with "),a("code",[e._v("s")]),e._v(":")]),e._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"60%"},attrs:{src:n(372),alt:"code completion"}}),e._v(" "),a("p",[e._v("Code Completion")])]),e._v(" "),a("p",[e._v("Try using code completion on other objects. For example, you can reverse a "),a("code",[e._v("String")]),e._v(" or convert all the characters to lower case:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// ObjectsEverywhere/Strings.kt\n\nfun main() {\n  val s = "AbcD"\n  println(s.reversed())\n  println(s.toLowerCase())\n}\n/* Output:\nDcbA\nabcd\n*/\n')])])]),a("p",[e._v("You can easily convert a "),a("code",[e._v("String")]),e._v(" to an integer and back:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// ObjectsEverywhere/Conversion.kt\n\nfun main() {\n  val s = "123"\n  println(s.toInt())\n  val i = 123\n  println(i.toString())\n}\n/* Output:\n123\n123\n*/\n')])])]),a("p",[e._v("Later in the book we discuss strategies to handle situations when the "),a("code",[e._v("String")]),e._v(" you want to convert doesn’t represent a correct integer value.")]),e._v(" "),a("p",[e._v("You can also convert from one numerical type to another. To avoid confusion, conversions between number types are explicit. For example, you convert an "),a("code",[e._v("Int i")]),e._v(" to a "),a("code",[e._v("Long")]),e._v(" by calling "),a("code",[e._v("i.toLong()")]),e._v(", or to a "),a("code",[e._v("Double")]),e._v(" with "),a("code",[e._v("i.toDouble()")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ObjectsEverywhere/NumberConversions.kt\n\nfun fraction(numerator: Long, denom: Long) =\n  numerator.toDouble() / denom\n\nfun main() {\n  val num = 1\n  val den = 2\n  val f = fraction(num.toLong(), den.toLong())\n  println(f)\n}\n/* Output:\n0.5\n*/\n")])])]),a("p",[e._v("Well-defined classes are easy for a programmer to understand, and produce code that’s easy to read.")]),e._v(" "),a("p",[a("em",[a("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);