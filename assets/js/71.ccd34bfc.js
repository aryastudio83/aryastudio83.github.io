(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{442:function(e,t,n){"use strict";n.r(t);var i=n(44),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"extension-properties"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extension-properties"}},[e._v("#")]),e._v(" Extension Properties")]),e._v(" "),n("blockquote",[n("p",[e._v("Just as functions can be extension functions, properties can be "),n("em",[e._v("extension properties")]),e._v(".")])]),e._v(" "),n("p",[e._v("The receiver type specification for extension properties is similar to the syntax for extension functions—the extended type comes right before the function or property name:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fun ReceiverType.extensionFunction() { ... }\nval ReceiverType.extensionProperty: PropType\n  get() { ... }\n")])])]),n("p",[e._v("An extension property requires a custom getter. The property value is computed for each access:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExtensionProperties/StringIndices.kt\npackage extensionproperties\nimport atomictest.eq\n\nval String.indices: IntRange\n  get() = 0 until length\n\nfun main() {\n  "abc".indices eq 0..2\n}\n')])])]),n("p",[e._v("Although you can convert any extension function without parameters into a property, we recommend thinking about it first. The reasons described in [Property Accessors](javascript:void(0)) for choosing between properties and functions also apply to extension properties. Preferring a property over a function makes sense only if it’s simple enough and improves readability.")]),e._v(" "),n("p",[e._v("You can define a generic extension property. Here, we convert "),n("code",[e._v("firstOrNull()")]),e._v(" from [Introduction to Generics](javascript:void(0)) to an extension property:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// ExtensionProperties/GenericListExt.kt\npackage extensionproperties\nimport atomictest.eq\n\nval <T> List<T>.firstOrNull: T?\n  get() = if (isEmpty()) null else this[0]\n\nfun main() {\n  listOf(1, 2, 3).firstOrNull eq 1\n  listOf<String>().firstOrNull eq null\n}\n")])])]),n("p",[n("a",{attrs:{href:"https://kotlinlang.org/docs/reference/coding-conventions.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Kotlin Style Guide"),n("OutboundLink")],1),e._v(" recommends a function over a property if the function throws an exception.")]),e._v(" "),n("p",[e._v("When the generic argument type isn’t used, you may replace it with "),n("code",[e._v("*")]),e._v(". This is called a "),n("em",[e._v("star projection")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// ExtensionProperties/ListOfStar.kt\npackage extensionproperties\nimport atomictest.eq\n\nval List<*>.indices: IntRange\n  get() = 0 until size\n\nfun main() {\n  listOf(1).indices eq 0..0\n  listOf('a', 'b', 'c', 'd').indices eq 0..3\n  emptyList<Int>().indices eq IntRange.EMPTY\n}\n")])])]),n("p",[e._v("When you use "),n("code",[e._v("List<*>")]),e._v(", you lose all specific information about the type contained in the "),n("code",[e._v("List")]),e._v(". For example, an element of a "),n("code",[e._v("List<*>")]),e._v(" can only be assigned to "),n("code",[e._v("Any?")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// ExtensionProperties/AnyFromListOfStar.kt\nimport atomictest.eq\n\nfun main() {\n  val list: List<*> = listOf(1, 2)\n  val any: Any? = list[0]\n  any eq 1\n}\n")])])]),n("p",[e._v("We have no information whether a value stored in a "),n("code",[e._v("List<*>")]),e._v(" is nullable or not, which is why it can be only assigned to a nullable "),n("code",[e._v("Any?")]),e._v(" type.")]),e._v(" "),n("p",[n("em",[n("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);