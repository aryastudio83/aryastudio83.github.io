(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{409:function(n,t,e){"use strict";e.r(t);var a=e(44),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"string-templates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-templates"}},[n._v("#")]),n._v(" String Templates")]),n._v(" "),e("blockquote",[e("p",[n._v("A "),e("em",[e("code",[n._v("String")]),n._v(" template")]),n._v(" is a programmatic way to generate a "),e("code",[n._v("String")]),n._v(".")])]),n._v(" "),e("p",[n._v("If you put a "),e("code",[n._v("$")]),n._v(" before an identifier name, the "),e("code",[n._v("String")]),n._v(" template will insert that identifier’s contents into the "),e("code",[n._v("String")]),n._v(":")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// StringTemplates/StringTemplates.kt\n\nfun main() {\n  val answer = 42\n  println("Found $answer!")     // [1]\n  println("printing a $1")      // [2]\n}\n/* Output:\nFound 42!\nprinting a $1\n*/\n')])])]),e("ul",[e("li",[e("strong",[n._v("[1]")]),n._v(" "),e("code",[n._v("$answer")]),n._v(" substitutes the value of "),e("code",[n._v("answer")]),n._v(".")]),n._v(" "),e("li",[e("strong",[n._v("[2]")]),n._v(" If what follows the "),e("code",[n._v("$")]),n._v(" isn’t recognizable as a program identifier, nothing special happens.")])]),n._v(" "),e("p",[n._v("You can also insert values into a "),e("code",[n._v("String")]),n._v(" using concatenation ("),e("code",[n._v("+")]),n._v("):")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// StringTemplates/StringConcatenation.kt\n\nfun main() {\n  val s = "hi\\n" // \\n is a newline character\n  val n = 11\n  val d = 3.14\n  println("first: " + s + "second: " +\n    n + ", third: " + d)\n}\n/* Output:\nfirst: hi\nsecond: 11, third: 3.14\n*/\n')])])]),e("p",[n._v("Placing an expression inside "),e("code",[n._v("${}")]),n._v(" evaluates it. The return value is converted to a "),e("code",[n._v("String")]),n._v(" and inserted into the resulting "),e("code",[n._v("String")]),n._v(":")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// StringTemplates/ExpressionInTemplate.kt\n\nfun main() {\n  val condition = true\n  println(\n    \"${if (condition) 'a' else 'b'}\")  // [1]\n  val x = 11\n  println(\"$x + 4 = ${x + 4}\")\n}\n/* Output:\na\n11 + 4 = 15\n*/\n")])])]),e("ul",[e("li",[e("strong",[n._v("[1]")]),n._v(" "),e("code",[n._v("if(condition) 'a' else 'b'")]),n._v(" is evaluated and the result is substituted for the entire "),e("code",[n._v("${}")]),n._v(" expression.")])]),n._v(" "),e("p",[n._v("When a "),e("code",[n._v("String")]),n._v(" must include a special character, such as a quote, you can either escape that character with a "),e("code",[n._v("\\")]),n._v(" ("),e("em",[n._v("backslash")]),n._v("), or use a "),e("code",[n._v("String")]),n._v(" literal in triple quotes:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// StringTemplates/TripleQuotes.kt\n\nfun main() {\n  val s = "value"\n  println("s = \\"$s\\".")\n  println("""s = "$s".""")\n}\n/* Output:\ns = "value".\ns = "value".\n*/\n')])])]),e("p",[n._v("With triple quotes, you insert a value of an expression the same way you do it for a single-quoted "),e("code",[n._v("String")]),n._v(".")]),n._v(" "),e("p",[e("em",[e("strong",[n._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);