(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{560:function(e,t,n){"use strict";n.r(t);var a=n(44),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"polymorphism"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#polymorphism"}},[e._v("#")]),e._v(" Polymorphism")]),e._v(" "),n("blockquote",[n("p",[n("em",[e._v("Polymorphism")]),e._v(" is an ancient Greek term meaning “many forms.” In programming, polymorphism means an object or its members have multiple implementations.")])]),e._v(" "),n("p",[e._v("Consider a simple hierarchy of "),n("code",[e._v("Pet")]),e._v(" types. The "),n("code",[e._v("Pet")]),e._v(" class says that all "),n("code",[e._v("Pet")]),e._v("s can "),n("code",[e._v("speak()")]),e._v(". "),n("code",[e._v("Dog")]),e._v(" and "),n("code",[e._v("Cat")]),e._v(" override the "),n("code",[e._v("speak()")]),e._v(" member function:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// Polymorphism/Pet.kt\npackage polymorphism\nimport atomictest.eq\n\nopen class Pet {\n  open fun speak() = "Pet"\n}\n\nclass Dog : Pet() {\n  override fun speak() = "Bark!"\n}\n\nclass Cat : Pet() {\n  override fun speak() = "Meow"\n}\n\nfun talk(pet: Pet) = pet.speak()\n\nfun main() {\n  talk(Dog()) eq "Bark!"     // [1]\n  talk(Cat()) eq "Meow"      // [2]\n}\n')])])]),n("p",[e._v("Notice the "),n("code",[e._v("talk()")]),e._v(" function parameter. When passing a "),n("code",[e._v("Dog")]),e._v(" or a "),n("code",[e._v("Cat")]),e._v(" to "),n("code",[e._v("talk()")]),e._v(", the specific type is forgotten and becomes a plain "),n("code",[e._v("Pet")]),e._v("—both "),n("code",[e._v("Dog")]),e._v("s and "),n("code",[e._v("Cat")]),e._v("s are "),n("em",[e._v("upcast")]),e._v(" to "),n("code",[e._v("Pet")]),e._v(". The objects are now treated as plain "),n("code",[e._v("Pet")]),e._v("s so shouldn’t the output for both lines "),n("strong",[e._v("[1]")]),e._v(" and "),n("strong",[e._v("[2]")]),e._v(" be "),n("code",[e._v('"Pet"')]),e._v("?")]),e._v(" "),n("p",[n("code",[e._v("talk()")]),e._v(" doesn’t know the exact type of "),n("code",[e._v("Pet")]),e._v(" it receives. Despite that, when you call "),n("code",[e._v("speak()")]),e._v(" through a reference to the base-class "),n("code",[e._v("Pet")]),e._v(", the correct subclass implementation is called, and you get the desired behavior.")]),e._v(" "),n("p",[e._v("Polymorphism occurs when a parent class reference contains a child class instance. When you call a member on that parent class reference, polymorphism produces the correct overridden member from the child class.")]),e._v(" "),n("p",[e._v("Connecting a function call to a function body is called "),n("em",[e._v("binding")]),e._v(". Ordinarily, you don’t think much about binding because it happens statically, at compile time. With polymorphism, the same operation must behave differently for different types—but the compiler cannot know in advance which function body to use. The function body must be determined dynamically, at runtime, using "),n("em",[e._v("dynamic binding")]),e._v(". Dynamic binding is also called "),n("em",[e._v("late binding")]),e._v(" or "),n("em",[e._v("dynamic dispatch")]),e._v(". Only at runtime can Kotlin determine the exact "),n("code",[e._v("speak()")]),e._v(" function to call. Thus we say that the binding for the polymorphic call "),n("code",[e._v("pet.speak()")]),e._v(" occurs dynamically.")]),e._v(" "),n("p",[e._v("Consider a fantasy game. Each "),n("code",[e._v("Character")]),e._v(" in the game has a "),n("code",[e._v("name")]),e._v(" and can "),n("code",[e._v("play()")]),e._v(". We combine "),n("code",[e._v("Fighter")]),e._v(" and "),n("code",[e._v("Magician")]),e._v(" to build specific characters:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// Polymorphism/FantasyGame.kt\npackage polymorphism\nimport atomictest.*\n\nabstract class Character(val name: String) {\n  abstract fun play(): String\n}\n\ninterface Fighter {\n  fun fight() = "Fight!"\n}\n\ninterface Magician {\n  fun doMagic() = "Magic!"\n}\n\nclass Warrior :\n  Character("Warrior"), Fighter {\n  override fun play() = fight()\n}\n\nopen class Elf(name: String = "Elf") :\n  Character(name), Magician {\n  override fun play() = doMagic()\n}\n\nclass FightingElf :\n  Elf("FightingElf"), Fighter {\n  override fun play() =\n    super.play() + fight()\n}\n\nfun Character.playTurn() =             // [1]\n  trace(name + ": " + play())          // [2]\n\nfun main() {\n  val characters: List<Character> = listOf(\n    Warrior(), Elf(), FightingElf()\n  )\n  characters.forEach { it.playTurn() } // [3]\n  trace eq """\n    Warrior: Fight!\n    Elf: Magic!\n    FightingElf: Magic!Fight!\n  """\n}\n')])])]),n("p",[e._v("In "),n("code",[e._v("main()")]),e._v(", each object is upcast to "),n("code",[e._v("Character")]),e._v(" as it is placed into the "),n("code",[e._v("List")]),e._v(". The "),n("code",[e._v("trace")]),e._v(" shows that calling "),n("code",[e._v("playTurn()")]),e._v(" on each "),n("code",[e._v("Character")]),e._v(" in the "),n("code",[e._v("List")]),e._v(" produces different output.")]),e._v(" "),n("p",[n("code",[e._v("playTurn()")]),e._v(" is an extension function on the base type "),n("code",[e._v("Character")]),e._v(". When called in line "),n("strong",[e._v("[3]")]),e._v(", it is "),n("em",[e._v("statically")]),e._v(" bound, which means the exact function to be called is determined at compile time. In line "),n("strong",[e._v("[3]")]),e._v(", the compiler determines that there is only one "),n("code",[e._v("playTurn()")]),e._v(" function implementation—the one defined on line "),n("strong",[e._v("[1]")]),e._v(".")]),e._v(" "),n("p",[e._v("When the compiler analyzes the "),n("code",[e._v("play()")]),e._v(" function call on line "),n("strong",[e._v("[2]")]),e._v(", it doesn’t know which function implementation to use. If the "),n("code",[e._v("Character")]),e._v(" is an "),n("code",[e._v("Elf")]),e._v(", it must call "),n("code",[e._v("Elf")]),e._v("’s "),n("code",[e._v("play()")]),e._v(". If the "),n("code",[e._v("Character")]),e._v(" is a "),n("code",[e._v("FightingElf")]),e._v(", it must call "),n("code",[e._v("FightingElf")]),e._v("’s "),n("code",[e._v("play()")]),e._v(". It might also need to call a function from an as-yet-undefined subclass. The function binding differs from invocation to invocation. At compile time, the only certainty is that "),n("code",[e._v("play()")]),e._v(" on line "),n("strong",[e._v("[2]")]),e._v(" is a member function of one of the "),n("code",[e._v("Character")]),e._v(" subclasses. The specific subclass can only be known at runtime, based on the actual "),n("code",[e._v("Character")]),e._v(" type.")]),e._v(" "),n("ul",[n("li",[e._v("-")])]),e._v(" "),n("p",[e._v("Dynamic binding isn’t free. The additional logic that determines the runtime type slightly impacts performance compared to static binding. To force clarity, Kotlin defaults to closed classes and member functions. To inherit and override, you must be explicit.")]),e._v(" "),n("p",[e._v("A language feature such as the "),n("code",[e._v("when")]),e._v(" statement can be learned in isolation. Polymorphism cannot—it only works in concert, as part of the larger picture of class relationships. To use object-oriented techniques effectively, you must expand your perspective to include not just members of an individual class, but also the commonality among classes and their relationships with each other.")]),e._v(" "),n("p",[n("em",[n("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);