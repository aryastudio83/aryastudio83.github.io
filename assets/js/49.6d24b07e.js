(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{420:function(e,n,t){"use strict";t.r(n);var i=t(44),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"constraining-visibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constraining-visibility"}},[e._v("#")]),e._v(" Constraining Visibility")]),e._v(" "),t("blockquote",[t("p",[e._v("If you leave a piece of code for a few days or weeks, then come back to it, you might see a much better way to write it.")])]),e._v(" "),t("p",[e._v("This is one of the prime motivations for "),t("em",[e._v("refactoring")]),e._v(", which rewrites working code to make it more readable, understandable, and thus maintainable.")]),e._v(" "),t("p",[e._v("There is a tension in this desire to change and improve your code. Consumers ("),t("em",[e._v("client programmers")]),e._v(") require aspects of your code to be stable. You want to change it, and they want it to stay the same.")]),e._v(" "),t("p",[e._v("This is particularly important for libraries. Consumers of a library don’t want to rewrite code for a new version of that library. However, the library creator must be free to make modifications and improvements, with the certainty that the client code won’t be affected by those changes.")]),e._v(" "),t("p",[e._v("Therefore, a primary consideration in software design is:")]),e._v(" "),t("blockquote",[t("p",[t("em",[e._v("Separate things that change from things that stay the same.")])])]),e._v(" "),t("p",[e._v("To control visibility, Kotlin and some other languages provide "),t("em",[e._v("access modifiers")]),e._v(". Library creators decide what is and is not accessible by the client programmer using the modifiers "),t("code",[e._v("public")]),e._v(", "),t("code",[e._v("private")]),e._v(", "),t("code",[e._v("protected")]),e._v(", and "),t("code",[e._v("internal")]),e._v(". This atom covers "),t("code",[e._v("public")]),e._v(" and "),t("code",[e._v("private")]),e._v(", with a brief introduction to "),t("code",[e._v("internal")]),e._v(". We explain "),t("code",[e._v("protected")]),e._v(" later in the book.")]),e._v(" "),t("p",[e._v("An access modifier such as "),t("code",[e._v("private")]),e._v(" appears before the definition for a class, function, or property. An access modifier only controls access for that particular definition.")]),e._v(" "),t("p",[e._v("A "),t("code",[e._v("public")]),e._v(" definition is accessible by client programmers, so changes to that definition impact client code directly. If you don’t provide a modifier, your definition is automatically "),t("code",[e._v("public")]),e._v(", so "),t("code",[e._v("public")]),e._v(" is technically redundant. You will sometimes still specify "),t("code",[e._v("public")]),e._v(" for the sake of clarity.")]),e._v(" "),t("p",[e._v("A "),t("code",[e._v("private")]),e._v(" definition is hidden and only accessible from other members of the same class. Changing, or even removing, a "),t("code",[e._v("private")]),e._v(" definition doesn’t directly impact client programmers.")]),e._v(" "),t("p",[t("code",[e._v("private")]),e._v(" classes, top-level functions, and top-level properties are accessible only inside that file:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Visibility/RecordAnimals.kt\n\nprivate var index = 0                  // [1]\n\nprivate class Animal(val name: String) // [2]\n\nprivate fun recordAnimal(              // [3]\n  animal: Animal\n) {\n  println("Animal #$index: ${animal.name}")\n  index++\n}\n\nfun recordAnimals() {\n  recordAnimal(Animal("Tiger"))\n  recordAnimal(Animal("Antelope"))\n}\n\nfun recordAnimalsCount() {\n  println("$index animals are here!")\n}\n')])])]),t("p",[e._v("You can access "),t("code",[e._v("private")]),e._v(" top-level properties ("),t("strong",[e._v("[1]")]),e._v("), classes ("),t("strong",[e._v("[2]")]),e._v("), and functions ("),t("strong",[e._v("[3]")]),e._v(") from other functions and classes within "),t("code",[e._v("RecordAnimals.kt")]),e._v(". Kotlin prevents you from accessing a "),t("code",[e._v("private")]),e._v(" top-level element from within another file, telling you it’s "),t("code",[e._v("private")]),e._v(" in the file:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Visibility/ObserveAnimals.kt\n\nfun main() {\n  // Can\'t access private members\n  // declared in another file.\n  // Class is private:\n  // val rabbit = Animal("Rabbit")\n  // Function is private:\n  // recordAnimal(rabbit)\n  // Property is private:\n  // index++\n\n  recordAnimals()\n  recordAnimalsCount()\n}\n/* Output:\nAnimal #0: Tiger\nAnimal #1: Antelope\n2 animals are here!\n*/\n')])])]),t("p",[e._v("Privacy is most commonly used for members of a class:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Visibility/Cookie.kt\n\nclass Cookie(\n  private var isReady: Boolean  // [1]\n) {\n  private fun crumble() =       // [2]\n    println("crumble")\n\n  public fun bite() =           // [3]\n    println("bite")\n\n  fun eat() {                   // [4]\n    isReady = true              // [5]\n    crumble()\n    bite()\n  }\n}\n\nfun main() {\n  val x = Cookie(false)\n  x.bite()\n  // Can\'t access private members:\n  // x.isReady\n  // x.crumble()\n  x.eat()\n}\n/* Output:\nbite\ncrumble\nbite\n*/\n')])])]),t("ul",[t("li",[t("strong",[e._v("[1]")]),e._v(" A "),t("code",[e._v("private")]),e._v(" property, not accessible outside the containing class.")]),e._v(" "),t("li",[t("strong",[e._v("[2]")]),e._v(" A "),t("code",[e._v("private")]),e._v(" member function.")]),e._v(" "),t("li",[t("strong",[e._v("[3]")]),e._v(" A "),t("code",[e._v("public")]),e._v(" member function, accessible to anyone.")]),e._v(" "),t("li",[t("strong",[e._v("[4]")]),e._v(" No access modifier means "),t("code",[e._v("public")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("[5]")]),e._v(" Only members of the same class can access "),t("code",[e._v("private")]),e._v(" members.")])]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("private")]),e._v(" keyword means no one can access that member except other members of that class. Other classes cannot access "),t("code",[e._v("private")]),e._v(" members, so it’s as if you’re also insulating the class against yourself and your collaborators. With "),t("code",[e._v("private")]),e._v(", you can freely change that member without worrying whether it affects another class in the same package. As a library designer you’ll typically keep things as "),t("code",[e._v("private")]),e._v(" as possible, and expose only functions and classes to client programmers.")]),e._v(" "),t("p",[e._v("Any member function that is a "),t("em",[e._v("helper function")]),e._v(" for a class can be made "),t("code",[e._v("private")]),e._v(" to ensure you don’t accidentally use it elsewhere in the package and thus prohibit yourself from changing or removing that function.")]),e._v(" "),t("p",[e._v("The same is true for a "),t("code",[e._v("private")]),e._v(" property inside a class. Unless you must expose the underlying implementation (which is less likely than you might think), make properties "),t("code",[e._v("private")]),e._v(". However, just because a reference to an object is "),t("code",[e._v("private")]),e._v(" inside a class doesn’t mean some other object can’t have a "),t("code",[e._v("public")]),e._v(" reference to the same object:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Visibility/MultipleRef.kt\n\nclass Counter(var start: Int) {\n  fun increment() {\n    start += 1\n  }\n  override fun toString() = start.toString()\n}\n\nclass CounterHolder(counter: Counter) {\n  private val ctr = counter\n  override fun toString() =\n    "CounterHolder: " + ctr\n}\n\nfun main() {\n  val c = Counter(11)                 // [1]\n  val ch = CounterHolder(c)           // [2]\n  println(ch)\n  c.increment()                       // [3]\n  println(ch)\n  val ch2 = CounterHolder(Counter(9)) // [4]\n  println(ch2)\n}\n/* Output:\nCounterHolder: 11\nCounterHolder: 12\nCounterHolder: 9\n*/\n')])])]),t("ul",[t("li",[t("strong",[e._v("[1]")]),e._v(" "),t("code",[e._v("c")]),e._v(" is now defined in the scope "),t("em",[e._v("surrounding")]),e._v(" the creation of the "),t("code",[e._v("CounterHolder")]),e._v(" object on the following line.")]),e._v(" "),t("li",[t("strong",[e._v("[2]")]),e._v(" Passing "),t("code",[e._v("c")]),e._v(" as the argument to the "),t("code",[e._v("CounterHolder")]),e._v(" constructor means that the new "),t("code",[e._v("CounterHolder")]),e._v(" now refers to the same "),t("code",[e._v("Counter")]),e._v(" object that "),t("code",[e._v("c")]),e._v(" refers to.")]),e._v(" "),t("li",[t("strong",[e._v("[3]")]),e._v(" The "),t("code",[e._v("Counter")]),e._v(" that is supposedly "),t("code",[e._v("private")]),e._v(" inside "),t("code",[e._v("ch")]),e._v(" can still be manipulated via "),t("code",[e._v("c")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("[4]")]),e._v(" "),t("code",[e._v("Counter(9)")]),e._v(" has no other references except within "),t("code",[e._v("CounterHolder")]),e._v(", so it cannot be accessed or modified by anything except "),t("code",[e._v("ch2")]),e._v(".")])]),e._v(" "),t("p",[e._v("Maintaining multiple references to a single object is called "),t("em",[e._v("aliasing")]),e._v(" and can produce surprising behavior.")]),e._v(" "),t("h3",{attrs:{id:"modules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[e._v("#")]),e._v(" Modules")]),e._v(" "),t("p",[e._v("Unlike the small examples in this book, real programs are often large. It can be helpful to divide such programs into one or more "),t("em",[e._v("modules")]),e._v(". A module is a logically independent part of a codebase. The way you divide a project into modules depends on the build system (such as "),t("a",{attrs:{href:"https://gradle.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gradle"),t("OutboundLink")],1),e._v(" or "),t("a",{attrs:{href:"https://maven.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maven"),t("OutboundLink")],1),e._v(") and is beyond the scope of this book.")]),e._v(" "),t("p",[e._v("An "),t("code",[e._v("internal")]),e._v(" definition is accessible only inside the module where it is defined. "),t("code",[e._v("internal")]),e._v(" lands somewhere between "),t("code",[e._v("private")]),e._v(" and "),t("code",[e._v("public")]),e._v("—use it when "),t("code",[e._v("private")]),e._v(" is too restrictive but you don’t want an element to be a part of the "),t("code",[e._v("public")]),e._v(" API. We do not use "),t("code",[e._v("internal")]),e._v(" in the book’s examples or exercises.")]),e._v(" "),t("p",[e._v("Modules are a higher-level concept. The following atom introduces "),t("em",[e._v("packages")]),e._v(", which enable finer-grained structuring. A library is often a single module consisting of multiple packages, so "),t("code",[e._v("internal")]),e._v(" elements are available within the library but are not accessible by consumers of that library.")]),e._v(" "),t("p",[t("em",[t("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);