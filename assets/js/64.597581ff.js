(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{436:function(a,e,t){"use strict";t.r(e);var s=t(44),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"data-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-classes"}},[a._v("#")]),a._v(" Data Classes")]),a._v(" "),t("blockquote",[t("p",[a._v("Kotlin reduces repetitive coding.")])]),a._v(" "),t("p",[a._v("The "),t("code",[a._v("class")]),a._v(" mechanism performs a fair amount of work for you. However, creating classes that primarily hold data still requires a significant amount of repetitive code. When you need a class that’s essentially a data holder, "),t("code",[a._v("data")]),a._v(" classes simplify your code and perform common tasks.")]),a._v(" "),t("p",[a._v("You define a "),t("code",[a._v("data")]),a._v(" class using the "),t("code",[a._v("data")]),a._v(" keyword, which tells Kotlin to generate additional functionality. Each constructor parameter must be preceded by "),t("code",[a._v("var")]),a._v(" or "),t("code",[a._v("val")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// DataClasses/Simple.kt\npackage dataclasses\nimport atomictest.eq\n\ndata class Simple(\n  val arg1: String,\n  var arg2: Int\n)\n\nfun main() {\n  val s1 = Simple("Hi", 29)\n  val s2 = Simple("Hi", 29)\n  s1 eq "Simple(arg1=Hi, arg2=29)"\n  s1 eq s2\n}\n')])])]),t("p",[a._v("This example reveals two features of "),t("code",[a._v("data")]),a._v(" classes:")]),a._v(" "),t("ol",[t("li",[a._v("The "),t("code",[a._v("String")]),a._v(" produced by "),t("code",[a._v("s1")]),a._v(" is different than what we usually see; it includes the parameter names and values of the data held by the object. "),t("code",[a._v("data")]),a._v(" classes display objects in a nice, readable format without requiring any additional code.")]),a._v(" "),t("li",[a._v("If you create two instances of the same "),t("code",[a._v("data")]),a._v(" class containing identical data (equal values for properties), you probably also want those two instances to be equal. To achieve that behavior for a regular class, you must define a special function "),t("code",[a._v("equals()")]),a._v(" to compare instances. In "),t("code",[a._v("data")]),a._v(" classes, this function is automatically generated; it compares the values of all properties specified as constructor parameters.")])]),a._v(" "),t("p",[a._v("Here’s an ordinary class "),t("code",[a._v("Person")]),a._v(" and a "),t("code",[a._v("data")]),a._v(" class "),t("code",[a._v("Contact")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// DataClasses/DataClasses.kt\npackage dataclasses\nimport atomictest.*\n\nclass Person(val name: String)\n\ndata class Contact(\n  val name: String,\n  val number: String\n)\n\nfun main() {\n  // These seem the same, but they\'re not:\n  Person("Cleo") neq Person("Cleo")\n  // A data class defines equality sensibly:\n  Contact("Miffy", "1-234-567890") eq\n  Contact("Miffy", "1-234-567890")\n}\n/* Sample output:\ndataclasses.Person@54bedef2\nContact(name=Miffy, number=1-234-567890)\n*/\n')])])]),t("p",[a._v("Because the "),t("code",[a._v("Person")]),a._v(" class is defined without the "),t("code",[a._v("data")]),a._v(" keyword, two instances containing the same "),t("code",[a._v("name")]),a._v(" are not equal. Fortunately, creating "),t("code",[a._v("Contact")]),a._v(" as a "),t("code",[a._v("data")]),a._v(" class produces a reasonable result.")]),a._v(" "),t("p",[a._v("Notice the difference between the display format of the "),t("code",[a._v("data")]),a._v(" class, and "),t("code",[a._v("Person")]),a._v(", which just shows default object information.")]),a._v(" "),t("p",[a._v("Another useful function generated for every "),t("code",[a._v("data")]),a._v(" class is "),t("code",[a._v("copy()")]),a._v(", which creates a new object containing the data from the current object. However, it also allows you to change selected values in the process:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// DataClasses/CopyDataClass.kt\npackage dataclasses\nimport atomictest.eq\n\ndata class DetailedContact(\n  val name: String,\n  val surname: String,\n  val number: String,\n  val address: String\n)\n\nfun main() {\n  val contact = DetailedContact(\n    "Miffy",\n    "Miller",\n    "1-234-567890",\n    "1600 Amphitheatre Parkway")\n  val newContact = contact.copy(\n    number = "098-765-4321",\n    address = "Brandschenkestrasse 110")\n  newContact eq DetailedContact(\n    "Miffy",\n    "Miller",\n    "098-765-4321",\n    "Brandschenkestrasse 110")\n}\n')])])]),t("p",[a._v("The parameter names for "),t("code",[a._v("copy()")]),a._v(" are identical to the constructor parameters. All arguments have default values that are equal to the current values, so you provide only the ones you want to replace.")]),a._v(" "),t("h3",{attrs:{id:"hashmap-and-hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-and-hashset"}},[a._v("#")]),a._v(" "),t("code",[a._v("HashMap")]),a._v(" and "),t("code",[a._v("HashSet")])]),a._v(" "),t("p",[a._v("Creating a "),t("code",[a._v("data")]),a._v(" class also generates an appropriate "),t("em",[a._v("hash function")]),a._v(" so that objects can be used as keys in "),t("code",[a._v("HashMap")]),a._v("s and "),t("code",[a._v("HashSet")]),a._v("s:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// DataClasses/HashCode.kt\npackage dataclasses\nimport atomictest.eq\n\ndata class Key(val name: String, val id: Int)\n\nfun main() {\n  val korvo: Key = Key("Korvo", 19)\n  korvo.hashCode() eq -2041757108\n  val map = HashMap<Key, String>()\n  map[korvo] = "Alien"\n  map[korvo] eq "Alien"\n  val set = HashSet<Key>()\n  set.add(korvo)\n  set.contains(korvo) eq true\n}\n')])])]),t("p",[t("code",[a._v("hashCode()")]),a._v(" is used in conjunction with "),t("code",[a._v("equals()")]),a._v(" to rapidly look up a "),t("code",[a._v("Key")]),a._v(" in a "),t("code",[a._v("HashMap")]),a._v(" or a "),t("code",[a._v("HashSet")]),a._v(". Creating a correct "),t("code",[a._v("hashCode()")]),a._v(" by hand is tricky and error-prone, so it is quite beneficial to have the "),t("code",[a._v("data")]),a._v(" class do it for you. [Operator Overloading](javascript:void(0)) covers "),t("code",[a._v("equals()")]),a._v(" and "),t("code",[a._v("hashCode()")]),a._v(" in more detail.")]),a._v(" "),t("p",[t("em",[t("strong",[a._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);