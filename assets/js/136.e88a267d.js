(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{514:function(e,n,t){"use strict";t.r(n);var a=t(44),i=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"constructors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructors"}},[e._v("#")]),e._v(" Constructors")]),e._v(" "),t("blockquote",[t("p",[e._v("You initialize a new object by passing information to a "),t("em",[e._v("constructor")]),e._v(".")])]),e._v(" "),t("p",[e._v("Each object is an isolated world. A program is a collection of objects, so correct initialization of each individual object solves a large part of the initialization problem. Kotlin includes mechanisms to guarantee proper object initialization.")]),e._v(" "),t("p",[e._v("A constructor is like a special member function that initializes a new object. The simplest form of a constructor is a single-line class definition:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Constructors/Wombat.kt\n\nclass Wombat\n\nfun main() {\n  val wombat = Wombat()\n}\n")])])]),t("p",[e._v("In "),t("code",[e._v("main()")]),e._v(", calling "),t("code",[e._v("Wombat()")]),e._v(" creates a "),t("code",[e._v("Wombat")]),e._v(" object. If you are coming from another object-oriented language you might expect to see a "),t("code",[e._v("new")]),e._v(" keyword used here, but "),t("code",[e._v("new")]),e._v(" would be redundant in Kotlin so it was omitted.")]),e._v(" "),t("p",[e._v("You pass information to a constructor using a parameter list, just like a function. Here, the "),t("code",[e._v("Alien")]),e._v(" constructor takes a single argument:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Constructors/Arg.kt\n\nclass Alien(name: String) {\n  val greeting = "Poor $name!"\n}\n\nfun main() {\n  val alien = Alien("Mr. Meeseeks")\n  println(alien.greeting)\n  // alien.name // Error     // [1]\n}\n/* Output:\nPoor Mr. Meeseeks!\n*/\n')])])]),t("p",[e._v("Creating an "),t("code",[e._v("Alien")]),e._v(" object requires the argument (try it without one). "),t("code",[e._v("name")]),e._v(" initializes the "),t("code",[e._v("greeting")]),e._v(" property within the constructor, but it is not accessible outside the constructor—try uncommenting line "),t("strong",[e._v("[1]")]),e._v(".")]),e._v(" "),t("p",[e._v("If you want the constructor parameter to be accessible outside the class body, define it as a "),t("code",[e._v("var")]),e._v(" or "),t("code",[e._v("val")]),e._v(" in the parameter list:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Constructors/VisibleArgs.kt\n\nclass MutableNameAlien(var name: String)\n\nclass FixedNameAlien(val name: String)\n\nfun main() {\n  val alien1 =\n    MutableNameAlien("Reverse Giraffe")\n  val alien2 =\n    FixedNameAlien("Krombopolis Michael")\n\n  alien1.name = "Parasite"\n  // Can\'t do this:\n  // alien2.name = "Parasite"\n}\n')])])]),t("p",[e._v("These class definitions have no explicit class bodies—the bodies are implied.")]),e._v(" "),t("p",[e._v("When "),t("code",[e._v("name")]),e._v(" is defined as a "),t("code",[e._v("var")]),e._v(" or "),t("code",[e._v("val")]),e._v(", it becomes a property and is thus accessible outside the constructor. "),t("code",[e._v("val")]),e._v(" constructor parameters cannot be changed, while "),t("code",[e._v("var")]),e._v(" constructor parameters are mutable.")]),e._v(" "),t("p",[e._v("Your class can have numerous constructor parameters:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Constructors/MultipleArgs.kt\n\nclass AlienSpecies(\n  val name: String,\n  val eyes: Int,\n  val hands: Int,\n  val legs: Int\n) {\n  fun describe() =\n    "$name with $eyes eyes, " +\n      "$hands hands and $legs legs"\n}\n\nfun main() {\n  val kevin =\n    AlienSpecies("Zigerion", 2, 2, 2)\n  val mortyJr =\n    AlienSpecies("Gazorpian", 2, 6, 2)\n  println(kevin.describe())\n  println(mortyJr.describe())\n}\n/* Output:\nZigerion with 2 eyes, 2 hands and 2 legs\nGazorpian with 2 eyes, 6 hands and 2 legs\n*/\n')])])]),t("p",[e._v("In [Complex Constructors](javascript:void(0)), you’ll see that constructors can also contain complex initialization logic.")]),e._v(" "),t("p",[e._v("If an object is used when a "),t("code",[e._v("String")]),e._v(" is expected, Kotlin calls the object’s "),t("code",[e._v("toString()")]),e._v(" member function. If you don’t write one, you still get a default "),t("code",[e._v("toString()")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Constructors/DisplayAlienSpecies.kt\n\nfun main() {\n  val krombopulosMichael =\n    AlienSpecies("Gromflomite", 2, 2, 2)\n  println(krombopulosMichael)\n}\n/* Sample output:\nAlienSpecies@4d7e1886\n*/\n')])])]),t("p",[e._v("The default "),t("code",[e._v("toString()")]),e._v(" isn’t very useful—it produces the class name and the physical address of the object (this varies from one program execution to the next). You can define your own "),t("code",[e._v("toString()")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Constructors/Scientist.kt\n\nclass Scientist(val name: String) {\n  override fun toString(): String {\n    return \"Scientist('$name')\"\n  }\n}\n\nfun main() {\n  val zeep = Scientist(\"Zeep Xanflorp\")\n  println(zeep)\n}\n/* Output:\nScientist('Zeep Xanflorp')\n*/\n")])])]),t("p",[t("code",[e._v("override")]),e._v(" is a new keyword for us. It is required here because "),t("code",[e._v("toString()")]),e._v(" already has a definition, the one producing the primitive result. "),t("code",[e._v("override")]),e._v(" tells Kotlin that yes, we do actually want to replace the default "),t("code",[e._v("toString()")]),e._v(" with our own definition. The explicitness of "),t("code",[e._v("override")]),e._v(" clarifies the code and prevents mistakes.")]),e._v(" "),t("p",[e._v("A "),t("code",[e._v("toString()")]),e._v(" that displays the contents of an object in a convenient form is useful for finding and fixing programming errors. To simplify the process of "),t("em",[e._v("debugging")]),e._v(", IDEs provide "),t("a",{attrs:{href:"https://www.jetbrains.com/help/idea/debugging-code.html",target:"_blank",rel:"noopener noreferrer"}},[t("em",[e._v("debuggers")]),t("OutboundLink")],1),e._v(" that allow you to observe each step in the execution of a program and to see inside your objects.")]),e._v(" "),t("p",[t("em",[t("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);n.default=i.exports}}]);