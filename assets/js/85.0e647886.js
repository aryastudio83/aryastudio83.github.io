(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{459:function(e,t,n){"use strict";n.r(t);var o=n(44),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"complex-constructors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#complex-constructors"}},[e._v("#")]),e._v(" Complex Constructors")]),e._v(" "),n("blockquote",[n("p",[e._v("For code to work correctly, objects must be properly initialized.")])]),e._v(" "),n("p",[e._v("A constructor is a special function that creates a new object. In [Constructors](javascript:void(0)), we saw simple constructors that only initialize their arguments. Using "),n("code",[e._v("var")]),e._v(" or "),n("code",[e._v("val")]),e._v(" in the parameter list makes those parameters properties, accessible from outside the object:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ComplexConstructors/SimpleConstructor.kt\npackage complexconstructors\nimport atomictest.eq\n\nclass Alien(val name: String)\n\nfun main() {\n  val alien = Alien("Pencilvester")\n  alien.name eq "Pencilvester"\n}\n')])])]),n("p",[e._v("In these cases, we don’t write constructor code—Kotlin does it for us. For more customization, add constructor code in the class body. Code inside the "),n("code",[e._v("init")]),e._v(" section is executed during object creation:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ComplexConstructors/InitSection.kt\npackage complexconstructors\nimport atomictest.eq\n\nprivate var counter = 0\n\nclass Message(text: String) {\n  private val content: String\n  init {\n    counter += 10\n    content = "[$counter] $text"\n  }\n  override fun toString() = content\n}\n\nfun main() {\n  val m1 = Message("Big ba-da boom!")\n  m1 eq "[10] Big ba-da boom!"\n  val m2 = Message("Bzzzzt!")\n  m2 eq "[20] Bzzzzt!"\n}\n')])])]),n("p",[e._v("Constructor parameters are accessible inside the "),n("code",[e._v("init")]),e._v(" section even if they aren’t marked as properties using "),n("code",[e._v("var")]),e._v(" or "),n("code",[e._v("val")]),e._v(".")]),e._v(" "),n("p",[e._v("Although defined as "),n("code",[e._v("val")]),e._v(", "),n("code",[e._v("content")]),e._v(" is not initialized at the point of definition. In this case, Kotlin ensures that initialization occurs at one (and only one) point during construction. Either reassigning "),n("code",[e._v("content")]),e._v(" or forgetting to initialize it produces an error message.")]),e._v(" "),n("ul",[n("li",[e._v("-")])]),e._v(" "),n("p",[e._v("A constructor is the combination of its constructor parameter list—initialized before entering the class body—and the "),n("code",[e._v("init")]),e._v(" section(s), executed during object creation. Kotlin allows multiple "),n("code",[e._v("init")]),e._v(" sections, which are executed in definition order. However, in a large and complex class, spreading out the "),n("code",[e._v("init")]),e._v(" sections may produce maintenance issues for programmers who are accustomed to a single "),n("code",[e._v("init")]),e._v(" section.")]),e._v(" "),n("p",[n("em",[n("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);