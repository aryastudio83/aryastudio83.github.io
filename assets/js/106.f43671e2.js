(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{483:function(e,n,t){"use strict";t.r(n);var o=t(44),a=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"logging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" Logging")]),e._v(" "),t("blockquote",[t("p",[t("em",[e._v("Logging")]),e._v(" captures information from a running program.")])]),e._v(" "),t("p",[e._v("For example, an installation program might log:")]),e._v(" "),t("ul",[t("li",[e._v("The steps taken during setup.")]),e._v(" "),t("li",[e._v("The directories for file storage.")]),e._v(" "),t("li",[e._v("Startup values for the program.")])]),e._v(" "),t("p",[e._v("A web server might log the origin address and status of each request.")]),e._v(" "),t("p",[e._v("Logging is also helpful during debugging. Without logging, you might decipher the behavior of a program using "),t("code",[e._v("println()")]),e._v(" statements. This can be helpful in the absence of a debugger (such as the one built into IntelliJ IDEA). However, once you decide the program is working properly, you’ll probably take the "),t("code",[e._v("println()")]),e._v(" statements out. Later, if you run into more bugs, you might put them back in. In contrast, logging can be dynamically enabled when you need it, and turned off otherwise.")]),e._v(" "),t("p",[e._v("For some failures you can only report the issue. A program that recovers from some types of errors (as shown in [Exception Handling](javascript:void(0))) can log details about those errors for later analysis. In a web application, for example, you don’t terminate the program if something goes wrong. Logging captures these events, giving programmers and administrators a way to discover the problems. Meanwhile, the application continues running.")]),e._v(" "),t("p",[e._v("We use an open-source logging package designed for Kotlin called "),t("a",{attrs:{href:"https://github.com/MicroUtils/kotlin-logging",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kotlin-logging"),t("OutboundLink")],1),e._v(", which has the feel and simplicity of Kotlin. Note that there are other logging packages to choose from.")]),e._v(" "),t("p",[e._v("You must create a logger before using it. You’ll almost always want to create it at file scope so it’s available to all components in that file:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Logging/BasicLogging.kt\npackage logging\nimport mu.KLogging\n\nprivate val log = KLogging().logger\n\nfun main() {\n  val msg = "Hello, Kotlin Logging!"\n  log.trace(msg)\n  log.debug(msg)\n  log.info(msg)\n  log.warn(msg)\n  log.error(msg)\n}\n')])])]),t("p",[t("code",[e._v("main()")]),e._v(" shows the different "),t("em",[e._v("logging levels")]),e._v(": "),t("code",[e._v("trace()")]),e._v(", "),t("code",[e._v("debug()")]),e._v(" and "),t("code",[e._v("info()")]),e._v(" capture behavioral information, while "),t("code",[e._v("warn()")]),e._v(" and "),t("code",[e._v("error()")]),e._v(" indicate problems.")]),e._v(" "),t("p",[e._v("Start-up configuration determines the logging levels that are actually reported. This can be modified during execution. Operators of long-running applications can change the logging level without restarting the program (which is often unacceptable).")]),e._v(" "),t("p",[e._v("Logging libraries have a rather odd history. People were dissatisfied with the original logging library distributed with Java, so they created other libraries. In an attempt to unify logging, designers began developing common logging interfaces. Acknowledging that organizations may be invested in existing logging libraries, those interfaces were created as "),t("em",[e._v("facades")]),e._v(" for multiple different logging libraries. Later, other programmers created (presumably improved) facades over "),t("em",[e._v("those")]),e._v(" facades. Utilizing a logging system often means choosing a facade, then choosing one or more underlying implementations.")]),e._v(" "),t("p",[e._v("The Kotlin-logging library is a facade over the "),t("a",{attrs:{href:"https://www.slf4j.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Simple Logging Facade for Java (SLF4J)"),t("OutboundLink")],1),e._v(", which is an abstraction over multiple logging frameworks. You choose the framework that meets your needs—although it is more likely that the operations group in your company will make that decision, as they are the ones that usually manage logging and analyze the resulting log files.")]),e._v(" "),t("p",[e._v("For this example we use "),t("code",[e._v("slf4j-simple")]),e._v(" as our implementation. This comes as part of SLF4J and thus we are not required to install or configure an additional library—some libraries have an annoying amount of setup complexity. "),t("code",[e._v("slf4j-simple")]),e._v(" sends its output to the console error stream. When you run the program, you see:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[main] INFO mu.KLogging - Hello, Kotlin Logging!\n[main] WARN mu.KLogging - Hello, Kotlin Logging!\n[main] ERROR mu.KLogging - Hello, Kotlin Logging!\n")])])]),t("p",[t("code",[e._v("trace()")]),e._v(" and "),t("code",[e._v("debug()")]),e._v(" produce no output because the default configuration doesn’t report those levels. To get different reporting levels, change your logging configuration. Logging configuration varies depending on the logging package you’re using, so we don’t talk about it here.")]),e._v(" "),t("p",[e._v("Logging implementations that log to files often manage those log files by automatically discarding the oldest parts when files get too large. There are additional tools designed to read and analyze log files. The practice of logging can require fairly involved research.")]),e._v(" "),t("p",[e._v("For basic problems, the work of installing, configuring, and using a logging system might tempt you back to "),t("code",[e._v("println()")]),e._v(" statements. Fortunately, there are easier strategies.")]),e._v(" "),t("p",[e._v("The quick-and-dirty approach is to define a global function. This can easily be disabled when you don’t need it:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Logging/SimpleLoggingStrategy.kt\npackage logging\nimport checkinstructions.DataFile\n\nval logFile = // Reset ensures an empty file:\n  DataFile("simpleLogFile.txt").reset()\n\nfun debug(msg: String) =\n  System.err.println("Debug: $msg")\n// To disable:\n// fun debug(msg: String) = Unit\n\nfun trace(msg: String) =\n  logFile.appendText("Trace: $msg\\n")\n\nfun main() {\n  debug("Simple Logging Strategy")\n  trace("Line 1")\n  trace("Line 2")\n  println(logFile.readText())\n}\n/* Sample Output:\nDebug: Simple Logging Strategy\nTrace: Line 1\nTrace: Line 2\n*/\n')])])]),t("p",[t("code",[e._v("debug()")]),e._v(" sends its output to the console error stream. "),t("code",[e._v("trace()")]),e._v(" sends its output to a log file.")]),e._v(" "),t("p",[e._v("You can also create your own simple logging class:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Logging/AtomicLog.kt\npackage atomiclog\nimport checkinstructions.DataFile\n\nclass Logger(fileName: String) {\n  val logFile = DataFile(fileName).reset()\n  private fun log(type: String, msg: String) =\n    logFile.appendText("$type: $msg\\n")\n  fun trace(msg: String) = log("Trace", msg)\n  fun debug(msg: String) = log("Debug", msg)\n  fun info(msg: String) = log("Info", msg)\n  fun warn(msg: String) = log("Warn", msg)\n  fun error(msg: String) = log("Error", msg)\n  // For basic testing:\n  fun report(msg: String) {\n    trace(msg)\n    debug(msg)\n    info(msg)\n    warn(msg)\n    error(msg)\n  }\n}\n')])])]),t("p",[e._v("You can add support for other features like logging levels and time stamps.")]),e._v(" "),t("p",[e._v("Using the library is straightforward:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Logging/UseAtomicLog.kt\npackage useatomiclog\nimport atomiclog.Logger\nimport atomictest.eq\n\nprivate val logger = Logger("AtomicLog.txt")\n\nfun main() {\n  logger.report("Hello, Atomic Log!")\n  logger.logFile.readText() eq """\n  Trace: Hello, Atomic Log!\n  Debug: Hello, Atomic Log!\n  Info: Hello, Atomic Log!\n  Warn: Hello, Atomic Log!\n  Error: Hello, Atomic Log!\n  """\n}\n')])])]),t("p",[e._v("It’s tempting to create yet another logging library. This is probably not a good use of time.")]),e._v(" "),t("ul",[t("li",[e._v("-")])]),e._v(" "),t("p",[e._v("Logging is not as simple as calling library functions—there’s a significant run-time component. Logging is typically included in the deliverable product, and operations people must be able to turn logging on and off, dynamically adjust logging levels, and control the logfiles. For long-running programs such as servers, this last issue is particularly important because it includes strategies to prevent logfiles from filling up.")]),e._v(" "),t("p",[t("em",[t("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);