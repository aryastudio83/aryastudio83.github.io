(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{509:function(e,n,t){"use strict";t.r(n);var a=t(44),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"looping-ranges"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#looping-ranges"}},[e._v("#")]),e._v(" Looping & Ranges")]),e._v(" "),t("blockquote",[t("p",[e._v("The "),t("code",[e._v("for")]),e._v(" keyword executes a block of code for each value in a sequence.")])]),e._v(" "),t("p",[e._v("The set of values can be a range of integers, a "),t("code",[e._v("String")]),e._v(", or, as you’ll see later in the book, a collection of items. The "),t("code",[e._v("in")]),e._v(" keyword indicates that you are stepping through values:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for (v in values) {\n  // Do something with v\n}\n")])])]),t("p",[e._v("Each time through the loop, "),t("code",[e._v("v")]),e._v(" is given the next element in "),t("code",[e._v("values")]),e._v(".")]),e._v(" "),t("p",[e._v("Here’s a "),t("code",[e._v("for")]),e._v(" loop repeating an action a fixed number of times:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// LoopingAndRanges/RepeatThreeTimes.kt\n\nfun main() {\n  for (i in 1..3) {\n    println("Hey $i!")\n  }\n}\n/* Output:\nHey 1!\nHey 2!\nHey 3!\n*/\n')])])]),t("p",[e._v("The output shows the index "),t("code",[e._v("i")]),e._v(" receiving each value in the range from 1 to 3.")]),e._v(" "),t("p",[e._v("A "),t("em",[e._v("range")]),e._v(" is an interval of values defined by a pair of endpoints. There are two basic ways to define ranges:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// LoopingAndRanges/DefiningRanges.kt\n\nfun main() {\n  val range1 = 1..10         // [1]\n  val range2 = 0 until 10    // [2]\n  println(range1)\n  println(range2)\n}\n/* Output:\n1..10\n0..9\n*/\n")])])]),t("ul",[t("li",[t("strong",[e._v("[1]")]),e._v(" Using "),t("code",[e._v("..")]),e._v(" syntax includes both bounds in the resulting range.")]),e._v(" "),t("li",[t("strong",[e._v("[2]")]),e._v(" "),t("code",[e._v("until")]),e._v(" excludes the end. The output shows that "),t("code",[e._v("10")]),e._v(" is not part of the range.")])]),e._v(" "),t("p",[e._v("Displaying a range produces a readable format.")]),e._v(" "),t("p",[e._v("This sums the numbers from 10 to 100:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// LoopingAndRanges/SumUsingRange.kt\n\nfun main() {\n  var sum = 0\n  for (n in 10..100) {\n    sum += n\n  }\n  println("sum = $sum")\n}\n/* Output:\nsum = 5005\n*/\n')])])]),t("p",[e._v("You can iterate over a range in reverse order. You can also use a "),t("code",[e._v("step")]),e._v(" value to change the interval from the default of "),t("code",[e._v("1")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// LoopingAndRanges/ForWithRanges.kt\n\nfun showRange(r: IntProgression) {\n  for (i in r) {\n    print("$i ")\n  }\n  print("    // $r")\n  println()\n}\n\nfun main() {\n  showRange(1..5)\n  showRange(0 until 5)\n  showRange(5 downTo 1)          // [1]\n  showRange(0..9 step 2)         // [2]\n  showRange(0 until 10 step 3)   // [3]\n  showRange(9 downTo 2 step 3)\n}\n/* Output:\n1 2 3 4 5     // 1..5\n0 1 2 3 4     // 0..4\n5 4 3 2 1     // 5 downTo 1 step 1\n0 2 4 6 8     // 0..8 step 2\n0 3 6 9     // 0..9 step 3\n9 6 3     // 9 downTo 3 step 3\n*/\n')])])]),t("ul",[t("li",[t("strong",[e._v("[1]")]),e._v(" "),t("code",[e._v("downTo")]),e._v(" produces a decreasing range.")]),e._v(" "),t("li",[t("strong",[e._v("[2]")]),e._v(" "),t("code",[e._v("step")]),e._v(" changes the interval. Here, the range steps by a value of two instead of one.")]),e._v(" "),t("li",[t("strong",[e._v("[3]")]),e._v(" "),t("code",[e._v("until")]),e._v(" can also be used with "),t("code",[e._v("step")]),e._v(". Notice how this affects the output.")])]),e._v(" "),t("p",[e._v("In each case the sequence of numbers form an arithmetic progression. "),t("code",[e._v("showRange()")]),e._v(" accepts an "),t("code",[e._v("IntProgression")]),e._v(" parameter, which is a built-in type that includes "),t("code",[e._v("Int")]),e._v(" ranges. Notice that the "),t("code",[e._v("String")]),e._v(" representation of each "),t("code",[e._v("IntProgression")]),e._v(" as it appears in output comment for each line is often different from the range passed into "),t("code",[e._v("showRange()")]),e._v("—the "),t("code",[e._v("IntProgression")]),e._v(" is translating the input into an equivalent common form.")]),e._v(" "),t("p",[e._v("You can also produce a range of characters. This "),t("code",[e._v("for")]),e._v(" iterates from "),t("code",[e._v("a")]),e._v(" to "),t("code",[e._v("z")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// LoopingAndRanges/ForWithCharRange.kt\n\nfun main() {\n  for (c in 'a'..'z') {\n    print(c)\n  }\n}\n/* Output:\nabcdefghijklmnopqrstuvwxyz\n*/\n")])])]),t("p",[e._v("You can iterate over a range of elements that are whole quantities, like integers and characters, but not floating-point values.")]),e._v(" "),t("p",[e._v("Square brackets access characters by index. Because we start counting characters in a "),t("code",[e._v("String")]),e._v(" at zero, "),t("code",[e._v("s[0]")]),e._v(" selects the first character of the "),t("code",[e._v("String s")]),e._v(". Selecting "),t("code",[e._v("s.lastIndex")]),e._v(" produces the final index number:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// LoopingAndRanges/IndexIntoString.kt\n\nfun main() {\n  val s = "abc"\n  for (i in 0..s.lastIndex) {\n    print(s[i] + 1)\n  }\n}\n/* Output:\nbcd\n*/\n')])])]),t("p",[e._v("Sometimes people describe "),t("code",[e._v("s[0]")]),e._v(" as “the zeroth character.”")]),e._v(" "),t("p",[e._v("Characters are stored as numbers corresponding to their "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/ASCII",target:"_blank",rel:"noopener noreferrer"}},[e._v("ASCII codes"),t("OutboundLink")],1),e._v(", so adding an integer to a character produces a new character corresponding to the new code value:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// LoopingAndRanges/AddingIntToChar.kt\n\nfun main() {\n  val ch: Char = 'a'\n  println(ch + 25)\n  println(ch < 'z')\n}\n/* Output:\nz\ntrue\n*/\n")])])]),t("p",[e._v("The second "),t("code",[e._v("println()")]),e._v(" shows that you can compare character codes.")]),e._v(" "),t("p",[e._v("A "),t("code",[e._v("for")]),e._v(" loop can iterate over "),t("code",[e._v("String")]),e._v("s directly:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// LoopingAndRanges/IterateOverString.kt\n\nfun main() {\n  for (ch in "Jnskhm ") {\n    print(ch + 1)\n  }\n}\n/* Output:\nKotlin!\n*/\n')])])]),t("p",[t("code",[e._v("ch")]),e._v(" receives each character in turn.")]),e._v(" "),t("p",[e._v("In the following example, the function "),t("code",[e._v("hasChar()")]),e._v(" iterates over the "),t("code",[e._v("String")]),e._v(" "),t("code",[e._v("s")]),e._v(" and tests whether it contains a given character "),t("code",[e._v("ch")]),e._v(". The "),t("code",[e._v("return")]),e._v(" in the middle of the function stops the function when the answer is found:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// LoopingAndRanges/HasChar.kt\n\nfun hasChar(s: String, ch: Char): Boolean {\n  for (c in s) {\n    if (c == ch) return true\n  }\n  return false\n}\n\nfun main() {\n  println(hasChar(\"kotlin\", 't'))\n  println(hasChar(\"kotlin\", 'a'))\n}\n/* Output:\ntrue\nfalse\n*/\n")])])]),t("p",[e._v("The next atom shows that "),t("code",[e._v("hasChar()")]),e._v(" is unnecessary—you can use built-in syntax instead.")]),e._v(" "),t("p",[e._v("If you simply want to repeat an action a fixed number of times, you may use "),t("code",[e._v("repeat()")]),e._v(" instead of a "),t("code",[e._v("for")]),e._v(" loop:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// LoopingAndRanges/RepeatHi.kt\n\nfun main() {\n  repeat(2) {\n    println("hi!")\n  }\n}\n/* Output:\nhi!\nhi!\n*/\n')])])]),t("p",[t("code",[e._v("repeat()")]),e._v(" is a standard library function, not a keyword. You’ll see how it was created much later in the book.")]),e._v(" "),t("p",[t("em",[t("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);