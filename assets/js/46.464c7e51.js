(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{418:function(e,t,a){"use strict";a.r(t);var n=a(44),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"creating-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-classes"}},[e._v("#")]),e._v(" Creating Classes")]),e._v(" "),a("blockquote",[a("p",[e._v("Not only can you use predefined types like "),a("code",[e._v("IntRange")]),e._v(" and "),a("code",[e._v("String")]),e._v(", you can also create your own types of objects.")])]),e._v(" "),a("p",[e._v("Indeed, creating new types comprises much of the activity in object-oriented programming. You create new types by defining "),a("em",[e._v("classes")]),e._v(".")]),e._v(" "),a("p",[e._v("An object is a piece of the solution for a problem you’re trying to solve. Start by thinking of objects as expressing concepts. As a first approximation, if you discover a “thing” in your problem, represent that thing as an object in your solution.")]),e._v(" "),a("p",[e._v("Suppose you want to create a program to manage animals in a zoo. It makes sense to categorize the different types of animals based on how they behave, their needs, animals they get along with and those they fight with. Everything different about a species of animal is captured in the classification of that animal’s object. Kotlin uses the "),a("code",[e._v("class")]),e._v(" keyword to create a new type of object:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// CreatingClasses/Animals.kt\n\n// Create some classes:\nclass Giraffe\nclass Bear\nclass Hippo\n\nfun main() {\n  // Create some objects:\n  val g1 = Giraffe()\n  val g2 = Giraffe()\n  val b = Bear()\n  val h = Hippo()\n\n  // Each object() is unique:\n  println(g1)\n  println(g2)\n  println(h)\n  println(b)\n}\n/* Sample output:\nGiraffe@28d93b30\nGiraffe@1b6d3586\nHippo@4554617c\nBear@74a14482\n*/\n")])])]),a("p",[e._v("To define a class, start with the "),a("code",[e._v("class")]),e._v(" keyword, followed by an identifier for your new class. The class name must begin with a letter (A-Z, upper or lower case), but can include things like numbers and underscores. Following convention, we capitalize the first letter of a class name, and lowercase the first letter of all "),a("code",[e._v("val")]),e._v("s and "),a("code",[e._v("var")]),e._v("s.")]),e._v(" "),a("p",[a("code",[e._v("Animals.kt")]),e._v(" starts by defining three new classes, then creates four objects (also called "),a("em",[e._v("instances")]),e._v(") of those classes.")]),e._v(" "),a("p",[a("code",[e._v("Giraffe")]),e._v(" is a class, but a particular five-year-old male giraffe that lives in Botswana is an "),a("em",[e._v("object.")]),e._v(" Each object is different from all others, so we give them names like "),a("code",[e._v("g1")]),e._v(" and "),a("code",[e._v("g2")]),e._v(".")]),e._v(" "),a("p",[e._v("Notice the rather cryptic output of the last four lines. The part before the "),a("code",[e._v("@")]),e._v(" is the class name, and the number after the "),a("code",[e._v("@")]),e._v(" is the address where the object is located in your computer’s memory. Yes, that’s a number even though it includes some letters—it’s called "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hexadecimal",target:"_blank",rel:"noopener noreferrer"}},[e._v("“hexadecimal notation”"),a("OutboundLink")],1),e._v(". Every object in your program has its own unique address.")]),e._v(" "),a("p",[e._v("The classes defined here ("),a("code",[e._v("Giraffe")]),e._v(", "),a("code",[e._v("Bear")]),e._v(", and "),a("code",[e._v("Hippo")]),e._v(") are as simple as possible: the entire class definition is a single line. More complex classes use curly braces ("),a("code",[e._v("{")]),e._v(" and "),a("code",[e._v("}")]),e._v(") to create a "),a("em",[e._v("class body")]),e._v(" containing the characteristics and behaviors for that class.")]),e._v(" "),a("p",[e._v("A function defined within a class belongs to that class. In Kotlin, we call these "),a("em",[e._v("member functions")]),e._v(" of the class. Some object-oriented languages like Java choose to call them "),a("em",[e._v("methods")]),e._v(", a term that came from early object-oriented languages like Smalltalk. To emphasize the functional nature of Kotlin, the designers chose to drop the term "),a("em",[e._v("method")]),e._v(", as some beginners found the distinction confusing. Instead, the term "),a("em",[e._v("function")]),e._v(" is used throughout the language.")]),e._v(" "),a("p",[e._v("If it is unambiguous, we will just say “function.” If we must make the distinction:")]),e._v(" "),a("ul",[a("li",[a("em",[e._v("Member")]),e._v(" functions belong to a class.")]),e._v(" "),a("li",[a("em",[e._v("Top-level")]),e._v(" functions exist by themselves and are not part of a class.")])]),e._v(" "),a("p",[e._v("Here, "),a("code",[e._v("bark()")]),e._v(" belongs to the "),a("code",[e._v("Dog")]),e._v(" class:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// CreatingClasses/Dog.kt\n\nclass Dog {\n  fun bark() = "yip!"\n}\n\nfun main() {\n  val dog = Dog()\n}\n')])])]),a("p",[e._v("In "),a("code",[e._v("main()")]),e._v(", we create a "),a("code",[e._v("Dog")]),e._v(" object and assign it to "),a("code",[e._v("val dog")]),e._v(". Kotlin emits a warning because we never use "),a("code",[e._v("dog")]),e._v(".")]),e._v(" "),a("p",[e._v("Member functions are called ("),a("em",[e._v("invoked")]),e._v(") with the object name, followed by a "),a("code",[e._v(".")]),e._v(" (dot/period), followed by the function name and parameter list. Here we call the "),a("code",[e._v("meow()")]),e._v(" function and display the result:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// CreatingClasses/Cat.kt\n\nclass Cat {\n  fun meow() = \"mrrrow!\"\n}\n\nfun main() {\n  val cat = Cat()\n  // Call 'meow()' for 'cat':\n  val m1 = cat.meow()\n  println(m1)\n}\n/* Output:\nmrrrow!\n*/\n")])])]),a("p",[e._v("A member function acts on a particular instance of a class. When you call "),a("code",[e._v("meow()")]),e._v(", you must call it with an object. During the call, "),a("code",[e._v("meow()")]),e._v(" can access other members of that object.")]),e._v(" "),a("p",[e._v("When calling a member function, Kotlin keeps track of the object of interest by silently passing a reference to that object. That reference is available inside the member function by using the keyword "),a("code",[e._v("this")]),e._v(".")]),e._v(" "),a("p",[e._v("Member functions have special access to other elements within a class, simply by naming those elements. You can also explicitly "),a("em",[e._v("qualify")]),e._v(" access to those elements using "),a("code",[e._v("this")]),e._v(". Here, "),a("code",[e._v("exercise()")]),e._v(" calls "),a("code",[e._v("speak()")]),e._v(" with and without qualification:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// CreatingClasses/Hamster.kt\n\nclass Hamster {\n  fun speak() = \"Squeak! \"\n  fun exercise() =\n    this.speak() +   // Qualified with 'this'\n      speak() +      // Without 'this'\n      \"Running on wheel\"\n}\n\nfun main() {\n  val hamster = Hamster()\n  println(hamster.exercise())\n}\n/* Output:\nSqueak! Squeak! Running on wheel\n*/\n")])])]),a("p",[e._v("In "),a("code",[e._v("exercise()")]),e._v(", we call "),a("code",[e._v("speak()")]),e._v(" first with an explicit "),a("code",[e._v("this")]),e._v(" and then omit the qualification.")]),e._v(" "),a("p",[e._v("Sometimes you’ll see code containing an unnecessary explicit "),a("code",[e._v("this")]),e._v(". That kind of code often comes from programmers who know a different language where "),a("code",[e._v("this")]),e._v(" is either required, or part of its style. Using a feature unnecessarily is confusing for the reader, who spends time trying to figure out why you’re doing it. We recommend avoiding the unnecessary use of "),a("code",[e._v("this")]),e._v(".")]),e._v(" "),a("p",[e._v("Outside the class, you must say "),a("code",[e._v("hamster.exercise()")]),e._v(" and "),a("code",[e._v("hamster.speak()")]),e._v(".")]),e._v(" "),a("p",[a("em",[a("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);