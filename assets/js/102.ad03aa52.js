(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{476:function(e,t,n){"use strict";n.r(t);var a=n(44),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"exception-handling"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exception-handling"}},[e._v("#")]),e._v(" Exception Handling")]),e._v(" "),n("blockquote",[n("p",[e._v("Failure is always a possibility.")])]),e._v(" "),n("p",[e._v("Kotlin finds basic errors when it analyzes your program. Errors that cannot be detected at compile time must be dealt with at runtime. In [Exceptions](javascript:void(0)), you learned to throw exceptions. In this atom, we "),n("em",[e._v("catch")]),e._v(" exceptions.")]),e._v(" "),n("p",[e._v("Historically, failures were often disastrous. For example, programs written in the C language would simply stop working, lose their data, and potentially crash the operating system.")]),e._v(" "),n("p",[e._v("Improved error handling is a powerful way to increase code reliability. Error handling is especially important when creating reusable program components. To create a robust system, each component must be robust. With consistent error handling, components can reliably communicate problems to client code.")]),e._v(" "),n("p",[e._v("Modern applications often use concurrency, and a concurrent program must survive non-critical exceptions. A server, for example, should recover when an open session is terminated via an exception.")]),e._v(" "),n("p",[e._v("Exceptions conflate three activities:")]),e._v(" "),n("ol",[n("li",[e._v("Error reporting")]),e._v(" "),n("li",[e._v("Recovery")]),e._v(" "),n("li",[e._v("Resource cleanup")])]),e._v(" "),n("p",[e._v("Let’s consider each one.")]),e._v(" "),n("h3",{attrs:{id:"reporting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reporting"}},[e._v("#")]),e._v(" Reporting")]),e._v(" "),n("p",[e._v("Standard library exceptions are often adequate. For more specific exception handling, you can inherit new exception types from "),n("code",[e._v("Exception")]),e._v(" or a subtype:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/DefiningExceptions.kt\npackage exceptionhandling\nimport atomictest.*\n\nclass Exception1(\n  val value: Int\n): Exception("wrong value: $value")\n\nopen class Exception2(\n  description: String\n): Exception(description)\n\nclass Exception3(\n  description: String\n): Exception2(description)\n\nfun main() {\n  capture {\n    throw Exception1(13)\n  } eq "Exception1: wrong value: 13"\n  capture {\n    throw Exception3("error")\n  } eq "Exception3: error"\n}\n')])])]),n("p",[e._v("A "),n("code",[e._v("throw")]),e._v(" expression, as in "),n("code",[e._v("main()")]),e._v(", requires an instance of a "),n("code",[e._v("Throwable")]),e._v(" subtype. To define new exception types, inherit "),n("code",[e._v("Exception")]),e._v(" (which extends "),n("code",[e._v("Throwable")]),e._v("). Both "),n("code",[e._v("Exception1")]),e._v(" and "),n("code",[e._v("Exception2")]),e._v(" inherit "),n("code",[e._v("Exception")]),e._v(", while "),n("code",[e._v("Exception3")]),e._v(" inherits "),n("code",[e._v("Exception2")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"recovery"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recovery"}},[e._v("#")]),e._v(" Recovery")]),e._v(" "),n("p",[e._v("The ambition of exception handling is recovery. This means that you fix the problem, return the program to a stable state, and resume execution. Recovery often includes [logging](javascript:void(0)) information about the error.")]),e._v(" "),n("p",[e._v("Quite often, recovery isn’t possible. An exception might represent an unrecoverable program failure, either a coding error or something uncontrollable in the environment.")]),e._v(" "),n("p",[e._v("When an exception is thrown, the exception-handling mechanism looks for an appropriate place to continue execution. An exception keeps moving out to higher levels, from "),n("code",[e._v("function1()")]),e._v(" that threw the exception, to "),n("code",[e._v("function2()")]),e._v(" that calls "),n("code",[e._v("function1()")]),e._v(", to "),n("code",[e._v("function3()")]),e._v(" that calls "),n("code",[e._v("function2()")]),e._v(", and so on until reaching "),n("code",[e._v("main()")]),e._v(". A matching handler "),n("em",[e._v("catches")]),e._v(" the exception. This stops the search and runs that handler. If the program never finds a matching handler, it terminates with a console stack trace.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// ExceptionHandling/Stacktrace.kt\npackage stacktrace\nimport exceptionhandling.Exception1\n\nfun function1(): Int =\n  throw Exception1(-52)\n\nfun function2() = function1()\n\nfun function3() = function2()\n\nfun main() {\n//  function3()\n}\n")])])]),n("p",[e._v("Uncommenting the call to "),n("code",[e._v("function3()")]),e._v(" produces the following stack trace:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Exception in thread "main" exceptionhandling.Exception1: wrong value: -\\\n52\n  at stacktrace.StacktraceKt.function1(Stacktrace.kt:6)\n  at stacktrace.StacktraceKt.function2(Stacktrace.kt:8)\n  at stacktrace.StacktraceKt.function3(Stacktrace.kt:10)\n  at stacktrace.StacktraceKt.main(Stacktrace.kt:13)\n  at stacktrace.StacktraceKt.main(Stacktrace.kt)\n')])])]),n("p",[e._v("Any of "),n("code",[e._v("function1()")]),e._v(", "),n("code",[e._v("function2()")]),e._v(" or "),n("code",[e._v("function3()")]),e._v(" can "),n("code",[e._v("catch")]),e._v(" the exception and handle it, preventing the exception from terminating the program.")]),e._v(" "),n("p",[e._v("An "),n("em",[e._v("exception handler")]),e._v(" is the "),n("code",[e._v("catch")]),e._v(" keyword followed by a parameter list containing the exception you’re handling. This is followed by a block of code implementing the recovery.")]),e._v(" "),n("p",[e._v("In the following example, the function "),n("code",[e._v("toss()")]),e._v(" produces different exceptions for arguments 1-3, otherwise it returns “OK”. "),n("code",[e._v("test()")]),e._v(" contains a complete set of handlers for the "),n("code",[e._v("toss()")]),e._v(" function:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/Handlers.kt\npackage exceptionhandling\nimport atomictest.eq\n\nfun toss(which: Int) = when (which) {\n  1 -> throw Exception1(1)\n  2 -> throw Exception2("Exception 2")\n  3 -> throw Exception3("Exception 3")\n  else -> "OK"\n}\n\nfun test(which: Int): Any? =\n  try {\n    toss(which)\n  } catch (e: Exception1) {\n    e.value\n  } catch (e: Exception3) {\n    e.message\n  } catch (e: Exception2) {\n    e.message\n  }\n\nfun main() {\n  test(0) eq "OK"\n  test(1) eq 1\n  test(2) eq "Exception 2"\n  test(3) eq "Exception 3"\n}\n')])])]),n("p",[e._v("When you call "),n("code",[e._v("toss()")]),e._v(" you must "),n("code",[e._v("catch")]),e._v(" all relevant "),n("code",[e._v("toss()")]),e._v(" exceptions, allowing non-relevant exceptions to “bubble up” and be caught elsewhere.")]),e._v(" "),n("p",[e._v("The entire "),n("code",[e._v("try")]),e._v("-"),n("code",[e._v("catch")]),e._v(" in "),n("code",[e._v("test()")]),e._v(" is a single expression: it returns either the last expression of the "),n("code",[e._v("try")]),e._v(" body or the last expression of the "),n("code",[e._v("catch")]),e._v(" clause matching an exception. If no "),n("code",[e._v("catch")]),e._v(" handles the exception, that exception is thrown further up the stack. If uncaught, it generates a stack trace.")]),e._v(" "),n("p",[e._v("Because "),n("code",[e._v("Exception3")]),e._v(" extends "),n("code",[e._v("Exception2")]),e._v(", an "),n("code",[e._v("Exception3")]),e._v(" is handled as an "),n("code",[e._v("Exception2")]),e._v(" if "),n("code",[e._v("Exception2")]),e._v("’s "),n("code",[e._v("catch")]),e._v(" appears in the sequence of handlers before "),n("code",[e._v("Exception3")]),e._v("’s "),n("code",[e._v("catch")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/Hierarchy.kt\npackage exceptionhandling\nimport atomictest.eq\n\nfun testCatchOrder(which: Int) =\n  try {\n    toss(which)\n  } catch (e: Exception2) {    // [1]\n    "Handler for Exception2 got ${e.message}"\n  } catch (e: Exception3) {    // [2]\n    "Handler for Exception3 got ${e.message}"\n  }\n\nfun main() {\n  testCatchOrder(2) eq\n    "Handler for Exception2 got Exception 2"\n  testCatchOrder(3) eq\n    "Handler for Exception2 got Exception 3"\n}\n')])])]),n("p",[e._v("The "),n("code",[e._v("catch")]),e._v("-clause order means an "),n("code",[e._v("Exception3")]),e._v(" is caught by line "),n("strong",[e._v("[1]")]),e._v(", despite the more specific type of exception handler in line "),n("strong",[e._v("[2]")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"exception-subtypes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exception-subtypes"}},[e._v("#")]),e._v(" Exception Subtypes")]),e._v(" "),n("p",[e._v("In "),n("code",[e._v("testCode()")]),e._v(", an incorrect "),n("code",[e._v("code")]),e._v(" argument throws an "),n("code",[e._v("IllegalArgumentException")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/LibraryException.kt\npackage exceptionhandling\nimport atomictest.*\n\nfun testCode(code: Int) {\n  if (code <= 1000) {\n    throw IllegalArgumentException(\n      "\'code\' must be > 1000: $code")\n  }\n}\n\nfun main() {\n  try {\n    // A1 is 161 in base-16 (hex) notation:\n    testCode("A1".toInt(16))\n  } catch (e: IllegalArgumentException) {\n    e.message eq\n      "\'code\' must be > 1000: 161"\n  }\n  try {\n    testCode("0".toInt(1))\n  } catch (e: IllegalArgumentException) {\n    e.message eq\n      "radix 1 was not in valid range 2..36"\n  }\n}\n')])])]),n("p",[e._v("An "),n("code",[e._v("IllegalArgumentException")]),e._v(" is thrown by both "),n("code",[e._v("testCode()")]),e._v(" and the library function "),n("code",[e._v("toInt(radix)")]),e._v(". This results in the somewhat confusing error messages in "),n("code",[e._v("main()")]),e._v(". The problem is that we are using the same exception to represent two different issues. We solve it by throwing a new exception type called "),n("code",[e._v("IncorrectInputException")]),e._v(" for our error:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/NewException.kt\npackage exceptionhandling\nimport atomictest.eq\n\nclass IncorrectInputException(\n  message: String\n): Exception(message)\n\nfun checkCode(code: Int) {\n  if (code <= 1000) {\n    throw IncorrectInputException(\n      "Code must be > 1000: $code")\n  }\n}\n\nfun main() {\n  try {\n    checkCode("A1".toInt(16))\n  } catch (e: IncorrectInputException) {\n    e.message eq "Code must be > 1000: 161"\n  } catch (e: IllegalArgumentException) {\n    "Produces error" eq "if it gets here"\n  }\n  try {\n    checkCode("1".toInt(1))\n  } catch (e: IncorrectInputException) {\n    "Produces error" eq "if it gets here"\n  } catch (e: IllegalArgumentException) {\n    e.message eq\n      "radix 1 was not in valid range 2..36"\n  }\n}\n')])])]),n("p",[e._v("Now each issue has its own handler.")]),e._v(" "),n("p",[e._v("Resist creating too many exception types. As a rule of thumb, use different exception types to distinguish different handling schemes, and use different constructor parameters to provide details for a particular handling scheme.")]),e._v(" "),n("h3",{attrs:{id:"resource-cleanup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#resource-cleanup"}},[e._v("#")]),e._v(" Resource Cleanup")]),e._v(" "),n("p",[e._v("When failure is inevitable, automatic resource cleanup helps other parts of the program to continue running safely.")]),e._v(" "),n("p",[n("code",[e._v("finally")]),e._v(" ensures resource cleanup during exception handling. A "),n("code",[e._v("finally")]),e._v(" clause always runs, regardless of whether you leave a "),n("code",[e._v("try")]),e._v(" block normally or exceptionally:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/TryFinally.kt\npackage exceptionhandling\nimport atomictest.*\n\nfun checkValue(value: Int) {\n  try {\n    trace(value)\n    if (value <= 0)\n      throw IllegalArgumentException(\n        "value must be positive: $value")\n  } finally {\n    trace("In finally clause for $value")\n  }\n}\n\nfun main() {\n  listOf(10, -10).forEach {\n    try {\n      checkValue(it)\n    } catch (e: IllegalArgumentException) {\n      trace("In catch clause for main()")\n      trace(e.message)\n    }\n  }\n  trace eq """\n    10\n    In finally clause for 10\n    -10\n    In finally clause for -10\n    In catch clause for main()\n    value must be positive: -10\n  """\n}\n')])])]),n("p",[n("code",[e._v("finally")]),e._v(" works even with intermediate "),n("code",[e._v("catch")]),e._v(" clauses. For example, suppose a switch must be turned off when you’re done with it:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/GuaranteedCleanup.kt\npackage exceptionhandling\nimport atomictest.eq\n\ndata class Switch(\n  var on: Boolean = false,\n  var result: String = "OK"\n)\n\nfun testFinally(i: Int): Switch {\n  val sw = Switch()\n  try {\n    sw.on = true\n    when (i) {\n      0 -> throw IllegalStateException()\n      1 -> return sw                 // [1]\n    }\n  } catch (e: IllegalStateException) {\n    sw.result = "exception"\n  } finally {\n    sw.on = false\n  }\n  return sw\n}\n\nfun main() {\n  testFinally(0) eq\n    "Switch(on=false, result=exception)"\n  testFinally(1) eq\n    "Switch(on=false, result=OK)"    // [2]\n  testFinally(2) eq\n    "Switch(on=false, result=OK)"\n}\n')])])]),n("p",[e._v("Even if we "),n("code",[e._v("return")]),e._v(" inside a "),n("code",[e._v("try")]),e._v(" ("),n("strong",[e._v("[1]")]),e._v("), the "),n("code",[e._v("finally")]),e._v(" clause still runs ("),n("strong",[e._v("[2]")]),e._v("). Whether "),n("code",[e._v("testFinally()")]),e._v(" completes normally or with an exception, the "),n("code",[e._v("finally")]),e._v(" clause always executes.")]),e._v(" "),n("h3",{attrs:{id:"exception-handling-in-atomictest"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exception-handling-in-atomictest"}},[e._v("#")]),e._v(" Exception Handling in AtomicTest")]),e._v(" "),n("p",[e._v("This book uses AtomicTest’s "),n("code",[e._v("capture()")]),e._v(" to ensure that expected exceptions are thrown. "),n("code",[e._v("capture()")]),e._v(" takes a function argument and returns a "),n("code",[e._v("CapturedException")]),e._v(" object containing the exception class and error message:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// ExceptionHandling/CaptureImplementation.kt\npackage exceptionhandling\nimport atomictest.CapturedException\n\nfun capture(f:() -> Unit): CapturedException =\n  try {                                 // [1]\n    f()\n    CapturedException(null,\n      "<Error>: Expected an exception") // [2]\n  } catch (e: Throwable) {              // [3]\n    CapturedException(e::class,         // [4]\n      if (e.message != null) ": ${e.message}"\n      else "")\n  }\n\nfun main() {\n  capture {\n    throw Exception("!!!")\n  } eq "Exception: !!!"                 // [5]\n  capture {\n    1\n  } eq "<Error>: Expected an exception"\n}\n')])])]),n("p",[n("code",[e._v("capture()")]),e._v(" calls its function argument "),n("code",[e._v("f")]),e._v(" within a "),n("code",[e._v("try")]),e._v(" block ("),n("strong",[e._v("[1]")]),e._v("), handling all possible exceptions by catching "),n("code",[e._v("Throwable")]),e._v(" ("),n("strong",[e._v("[3]")]),e._v("). If no exception is thrown, the "),n("code",[e._v("CapturedException")]),e._v(" message indicates that an exception was expected ("),n("strong",[e._v("[2]")]),e._v("). If an exception is caught, the returned "),n("code",[e._v("CapturedException")]),e._v(" contains the exception class and a message ("),n("strong",[e._v("[4]")]),e._v("). A "),n("code",[e._v("CapturedException")]),e._v(" can be compared to a "),n("code",[e._v("String")]),e._v(" using "),n("code",[e._v("eq")]),e._v(" ("),n("strong",[e._v("[5]")]),e._v(").")]),e._v(" "),n("p",[e._v("Ordinarily you won’t catch "),n("code",[e._v("Throwable")]),e._v(", but will process each specific exception type.")]),e._v(" "),n("h3",{attrs:{id:"guidelines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#guidelines"}},[e._v("#")]),e._v(" Guidelines")]),e._v(" "),n("p",[e._v("Recovering from exceptions turns out to be remarkably rare, considering that recovery was the original intent. The primary purpose of exceptions in Kotlin is to discover program bugs, not recovery. Catching exceptions in ordinary Kotlin code is thus a “code smell.”")]),e._v(" "),n("p",[e._v("Here are guidelines for programming with exceptions in Kotlin:")]),e._v(" "),n("ol",[n("li",[n("p",[n("strong",[e._v("Logic Errors")]),e._v(": These are bugs in your code. Either don’t catch them at all (and produce a stack trace), or catch them at the top level of your application and report the bugs, possibly restarting the affected operation.")])]),e._v(" "),n("li",[n("p",[e._v("Data Errors")]),e._v(" "),n("p",[e._v(": These are errors from bad data that the programmer cannot control. The application must somehow deal with the problem without blaming it on program logic. For example, we’ve used")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("String.toInt()\n")])])]),n("p",[e._v("this atom, which throws an exception for an inappropriate")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("String\n")])])]),n("p",[e._v(". It also has a companion")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("String.toIntOrNull()\n")])])]),n("p",[e._v("that produces a")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("null\n")])])]),n("p",[e._v("upon failure so you can use it in an expression such as")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("val n = string.toIntOrNull() ?: default\n")])])]),n("p",[e._v(".")]),e._v(" "),n("p",[e._v("The Kotlin library is designed around dealing with a bad result by returning a "),n("code",[e._v("null")]),e._v(" instead of throwing an exception. Operations that are expected to occasionally fail will usually have an “OrNull” version that you can use instead of the exception version.")])]),e._v(" "),n("li",[n("p",[e._v("["),n("strong",[e._v("Check instructions")]),e._v("](javascript:void(0)) test for logic errors. These produce exceptions when they find a bug, but they look like function calls so you don’t explicitly throw exceptions in your code.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Input/Output Errors")]),e._v(": These are external conditions that you can’t control and you can’t ignore. However, using the “OrNull” approach rapidly obscures the understandability of the code. More importantly, you often "),n("em",[e._v("can")]),e._v(" recover from I/O errors, typically by retrying the operation. Thus, I/O operations in Kotlin throw exceptions, so you’ll have code in your applications that handle those and attempt to recover from them.")])])]),e._v(" "),n("p",[n("em",[n("strong",[e._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);