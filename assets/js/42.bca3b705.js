(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{414:function(n,e,t){"use strict";t.r(e);var a=t(44),i=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"the-in-keyword"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-in-keyword"}},[n._v("#")]),n._v(" The "),t("code",[n._v("in")]),n._v(" Keyword")]),n._v(" "),t("blockquote",[t("p",[n._v("The "),t("code",[n._v("in")]),n._v(" keyword tests whether a value is within a range.")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// InKeyword/MembershipInRange.kt\n\nfun main() {\n  val percent = 35\n  println(percent in 1..100)\n}\n/* Output:\ntrue\n*/\n")])])]),t("p",[n._v("In [Booleans](javascript:void(0)), you learned to check bounds explicitly:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// InKeyword/MembershipUsingBounds.kt\n\nfun main() {\n  val percent = 35\n  println(0 <= percent && percent <= 100)\n}\n/* Output:\ntrue\n*/\n")])])]),t("p",[t("code",[n._v("0 <= x && x <= 100")]),n._v(" is logically equivalent to "),t("code",[n._v("x in 0..100")]),n._v(". IntelliJ IDEA suggests automatically replacing the first form with the second, which is easier to read and understand.")]),n._v(" "),t("p",[n._v("The "),t("code",[n._v("in")]),n._v(" keyword is used for both iteration and membership. An "),t("code",[n._v("in")]),n._v(" inside the control expression of a "),t("code",[n._v("for")]),n._v(" loop means iteration, otherwise "),t("code",[n._v("in")]),n._v(" checks membership:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// InKeyword/IterationVsMembership.kt\n\nfun main() {\n  val values = 1..3\n  for (v in values) {\n    println("iteration $v")\n  }\n  val v = 2\n  if (v in values)\n    println("$v is a member of $values")\n}\n/* Output:\niteration 1\niteration 2\niteration 3\n2 is a member of 1..3\n*/\n')])])]),t("p",[n._v("The "),t("code",[n._v("in")]),n._v(" keyword is not limited to ranges. You can also check whether a character is a part of a "),t("code",[n._v("String")]),n._v(". The following example uses "),t("code",[n._v("in")]),n._v(" instead of "),t("code",[n._v("hasChar()")]),n._v(" from the previous atom:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// InKeyword/InString.kt\n\nfun main() {\n  println('t' in \"kotlin\")\n  println('a' in \"kotlin\")\n}\n/* Output:\ntrue\nfalse\n*/\n")])])]),t("p",[n._v("Later in the book you’ll see that "),t("code",[n._v("in")]),n._v(" works with other types, as well.")]),n._v(" "),t("p",[n._v("Here, "),t("code",[n._v("in")]),n._v(" tests whether a character belongs to a range of characters:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// InKeyword/CharRange.kt\n\nfun isDigit(ch: Char) = ch in '0'..'9'\n\nfun notDigit(ch: Char) =\n  ch !in '0'..'9'               // [1]\n\nfun main() {\n  println(isDigit('a'))\n  println(isDigit('5'))\n  println(notDigit('z'))\n}\n/* Output:\nfalse\ntrue\ntrue\n*/\n")])])]),t("ul",[t("li",[t("strong",[n._v("[1]")]),n._v(" "),t("code",[n._v("!in")]),n._v(" checks that a value doesn’t belong to a range.")])]),n._v(" "),t("p",[n._v("You can create a "),t("code",[n._v("Double")]),n._v(" range, but you can only use it to check for membership:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// InKeyword/FloatingPointRange.kt\n\nfun inFloatRange(n: Double) {\n  val r = 1.0..10.0\n  println("$n in $r? ${n in r}")\n}\n\nfun main() {\n  inFloatRange(0.999999)\n  inFloatRange(5.0)\n  inFloatRange(10.0)\n  inFloatRange(10.0000001)\n}\n/* Output:\n0.999999 in 1.0..10.0? false\n5.0 in 1.0..10.0? true\n10.0 in 1.0..10.0? true\n10.0000001 in 1.0..10.0? false\n*/\n')])])]),t("p",[n._v("Floating-point ranges can only be created using "),t("code",[n._v("..")]),n._v(" because "),t("code",[n._v("until")]),n._v(" would mean excluding a floating-point number as an endpoint, which doesn’t make sense.")]),n._v(" "),t("p",[n._v("You can check whether a "),t("code",[n._v("String")]),n._v(" is a member of a range of "),t("code",[n._v("String")]),n._v("s:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// InKeyword/StringRange.kt\n\nfun main() {\n  println("ab" in "aa".."az")\n  println("ba" in "aa".."az")\n}\n/* Output:\ntrue\nfalse\n*/\n')])])]),t("p",[n._v("Here Kotlin uses alphabetic comparison.")]),n._v(" "),t("p",[t("em",[t("strong",[n._v("Exercises and solutions can be found at www.AtomicKotlin.com.")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);